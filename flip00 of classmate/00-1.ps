%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: 00-1.dvi
%%CreationDate: Sun Nov 17 05:34:24 2019
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 1435 897
%%DocumentFonts: CenturySchL-Roma CenturySchL-Bold
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o 00-1.ps 00-1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.11.17:1334
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-ovl.pro 0 0
% $Id: pst-ovl.pro 859 2013-12-21 16:51:58Z herbert $
%
%% PostScript prologue for pst-ovl.tex.
%% Version 0.04, 2014/05/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/tx@ovlDict 10 dict def 
tx@ovlDict begin
%
/BeginOL { 
  dup -1 eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%
% END pst-ovl.pro

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /landplus90 true store

/landplus90 true store

 true setglobal globaldict /pbs@xform@level 0 put false setglobal
 
@fedspecial end
%%BeginFont: CenturySchL-Roma
%!PS-AdobeFont-1.0: CenturySchL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Century Schoolbook L Roman) readonly def
/FamilyName (Century Schoolbook L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -104 def
/UnderlineThickness 61 def
end readonly def
/FontName /CenturySchL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-217 -302 1000 981} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737E5BCFC117234606B4B123
0A4FACC1B47CAFF3C0D2EEA84A3338EDA8BE9146EDEB3760CAA73F828BE2D913
4F5B6CB3BA33D9E352EE1BA5629A1DA85B8B9EA3150173A28A696BB6BA626CDE
B4FE2A00D82994D690D7B35DB97CC5BA7A38E48A96D766C8D52A3BF8AA1EFDE1
DC71E78E5A9992230FF697EAF749D2732DCBB0A505688C80237F4FED0E50217A
6C5258DEDA1A818DBA5D621CC7A57CDD13482E8F92FDB4F09BEBD05F5290D0E0
4CAC7C464F1320B043BC06762BABF82AE3B3D04E0C508C9043F2DC1A7D0CF96E
7AF72FA0366859DAD36A64DA9EA459C15E849F631D6FDB5AC60EC4E0FE9C0474
A90A79124A8C71459CE2C019654BE0DC63FCA310746A26570CE30F13D237425A
B5B7F7B60DE18123A21C67456D1CA7B0AD0741CDDF7B2D648E387782587788F8
DD10E46A2A62DF0F097F161A2D371DC5875DF85B3D0DEB2C1CED837F20A448C2
9FC79F8CFB88E448B679CBD483C9F51E311F4ECE13A99E525C5874E48E701FFE
D127609FDC1A3551BB913BFF210B3C78930A3EE2E087F3CFD8556C66340008CA
FD72A6D8D72712F83B7E1E6FA0D0E6542557F43C92C53D55C4CB981F6AD519C7
56A393A879B6B8F3A6D60253E017560376A8D59AA845CF2C7E2C504CE64B19F9
98B50B89ECB175A1BAAEFC21B133A5CF644B8117B0265B218DE25473309F65D8
0B8906B8A4C7C5D3F6A212FD5DEF17F5220F902A07A761605F493931EB2CE225
2A925DEFF85880DE2367C7EB910BC2848A5FD283BAB0CDEEA36E48089137324D
BEDFA2F0D5D83F55C9DAB0CE74A516D7C41061184848CBE26285D1C6F45B793B
C022CFEBEEC80CB8B9131F88B4D5DC2F64B9B6A0B2CC6E6835210DFC35482BC1
24BD61B12CD41FE8238D6BB850879AC40278C926703D813983A68165748892BF
D2AD6BA433542FDA1E2FEA4603AB9FDF927DDA3E9724BFD696739F86FB71E069
520650BC886C57726BCA359E92762545E3F8F8816DD1F1D1F3797864F11884A4
9AD2FA81A7463F97E378FEC7F5E9D5276E3A8F5625593F2C25F69C9BA8B59B14
6C84C17641442441792CFA7C355FDA90E03FC18B015F91F6ABF57D8F0B7DFAC5
CBBC10D2D1315B54514BC4B9151C6658F3911616572EBF280AD4F2A8A3BE0753
51B33FB4B6FF5F133DEF0DB0C4161774623C1F9D3AE4D0D8D3B5C679CBBFEE79
9B1E7471155B5586005D6C57A1F7F876F2C38121AB47E07E3E22BE8D5191BFC0
284F66DC87B141E6D625D4890359E7E046E29182F075D332A5C94547FF809924
63883D258292F85F0ED4778162E55A8533C8D4B4A0C84BFC145981BEF74E5611
1660104698E9BC23BDCD9888C3C3E529717082BE36A0B802610A0BF6A7DDBD2B
122FE2A6C3F956DD9147382DE885B0C370FB1049461E4F38E19D26A744A99AEC
79FBBA92A27965AF40A71E05E4BA8D7FC26DE6CACF4C3FF495F0D3B1317D4933
E1E097ADD2F90EB0AC7B89F1E36AD630DED2617A67C1F6DBA918AB4589E8B0D7
0934E89007610BA1B9117D93B99069CB12B66F4979A1C73E9CE4E8B2ED99EB20
DF12E8D9D29D53AF3EE71A2C1C2758596AD40E704DF03F5324ED3BE8E62A7510
075ABECBA8375A5B8302EF841DEE273B2E7D2DF24878CAA34EAD81BDC76197DD
B773A01BBCE289A295CFD5C2D2ABD635DA7FFE17B5FB3798383309DE6323A125
5157E3E51CF778CCE8FC5D5C2D52F322CC455711C0147CB76F4723BB02264F54
752DE044C4904C375AACD66DDFDA88D53E98FE21D5149CA8007917ADC7938968
F07E16F5F94B47510DB3B8BF3EF2C1C6DB56FDEF4190263A01AE737ACE280DE5
93B202DB4FC6061B3DD4B30F0FC81515347A0A77127406DFDBC7ECDA793F530D
177B83AF413F6466B398666E265CF148A20096BBAFC6FD7DA6ABB0D7B1BCAD28
64E2A37FFAF281EA965C6EE63353FF463A03D2590905B8F1573B2975AD35A2D7
853B3D816D2040D714F7E6DFC32C9FF37C988F1FCC4EA4C9EB94B12F4526F4AB
DFC9CA9381AE4FC4331C9D9B88FDE9DBBC177B3603EA8D4A391B8330B6347BD5
63F221813C122E3770490B395F7FEF9F001245BEE77B40CEE6E191449727385D
BF150971CAD4B1F3590135FAD1A36F0CC6E735B9626C6265BCAF4C17F9028009
F46D50CF818BAE6BDEB3E460E7718A7EC0D09DFB56F73D52E930BFCF97722537
24A9B3245B524F97487C2A5D580670AD26DB080958EB268E420BC3C6C58F7443
2ADCBBD82C9F40B81472A79923B3A88DBDC00CF5C795199505B8CA24A522B6A0
854D6A5D13ACBDBDE03BBCC54C91BD87A2B470CD517FB074ABCF4EBF0228316C
C7E6EB24B1CE1E87CAB6B6187D2ED0CC5BB2D00713C69C51E8D0541100E3DF71
D501F4BFA0AE8260E100425C59964A706B659EBD6AD38ADBA4247D4028781CC5
BF817746224AE3F77A0AD70CC85F9FC48EC51E3444EA9135A79D2898CBF6CD6B
AD407B2C32C2B6183CA0BB339764A60A0C6BD66F5006E3B19936E6ACC5203047
0D130E9B61F001D9178DE87C33D9C0F09EC9EB2352FDDDCCB0C48B30DC4159B1
FAA06D819FD16C5D34AE13BDD8EC7D9B0A670872F68986EED606F91870BE4BCB
84207F18DF15228174B5335BA775F1D74EB0F9B7945D672BB4E9DDA689050865
426DF70386A09470C522B16E70AB4A217C9C95D57DF91F232C8917FD9AB1C645
36B34CC71F6EABD6EAE8A6A87593E1561966B3C80227D9B633FD5CD30BAA0739
D685E25F966A883843DA5529BB528DAB4493651024B2F2CE430F7250AA35065E
54CC4A99ADE8C293244F028D413654DE9E57986EC70A3FEF0D783168F2190B0E
DAA526ECC0F5122B7A647DBC9F9D91308E89CC8DE0425FD9EB66638D6D2252F2
54FD477654C630B701ECD53E4F6CAD0506A26DE98D22228B1095657EA9A56C0E
8139D1E75C02DC8F3147C504245D9EC1F6408CCA81A1F53C521F875A60191CF7
B1FA7176AC97B314EA7EF08163391F647DF8924863F66D550FCB7544ED34FAD4
064DFE09C91ED3C3A612C202C76530D4735EFA45B0167B2C3E12674A53B3A735
C20F9EF9B7CB7F1D174B2E94953F541C3B84D43185AAB636288DBB885C46C571
8498E0A8C3AAF39D9A46FB768CCC99E9238B1E39BACC2FEF0CE3ACC6809B4B0D
FDA7F3A7491D3058E6044EAFD3B1CE726918C08A283861D5CE67A4553FCA1ACE
09586D10BBBE5938A3A787BB7D77A8828768C1DC9D7D0B357E17E473ADEF1FCC
D72483843F7D08BC4E1F9DB0D1DB1452096097F9CD207255AFC9C804615C496F
867F43437E99E0D5E8D744D4E5DFE905B8D14A5797F21FD3873B595B161DB1C1
2E234EE1BF8470A6F21A07B41DC8B989C699CB671308E3ED87BABDA640241619
D913C5DD710E6DE3B94DF252F2E22FA960EBA47210FA364B7C84286D1C9FDBEE
7B1B2FE93436BF5F0D735BED02CFE72435710EC2A84C507B8230D58B31D64965
3341664F6EF98055A2BA88E6AD10FD7343452207E8179BBDD26499780971853C
1384E99001D660DFDB66C4915AD764F1B7991EE18EC66B841750DCF9F58F9843
DC5457EBFB8A4C0E38151749064499DE114D2F95D566841B618902DF56A45549
EC23DB85923C21B2AB6FA1AE122A3004B41BC98501FD21BEA8312A0804F03E0E
13DEC23F367F4BDABC6AF05E7A3AECC4D4F85DCFEE10A809C57BA93C7FC03D43
F47C6F554352F7D3460CF829272A3EAE3982904E7CBCF8E8F9E3AE2C88C46C8F
70B62C9271686435CF22A8AC8BC35DFE06A0E412998D42FA38107D7F6EBEE87C
6942B2897425414F0714480511C7D6379FBEC444F5CF4666182F8FAB1621CC84
ABA4C2D73A1429A6281589BABE2343A74D4EC7DCECE2BC7F1669796EEF9E8324
348BD069882448B4B955AB6DF351188CA9EED8B64B5EA1A95B6436A60EA6B446
2DC3EB45A6DF334AF6F6EB5C7E2A20F82467AC7FE0D2198A6E446D186670842F
CB74AF1E60DE347872F37EC93E6C918CA3FC0408E916D27F36119D1459833F9D
FADF56A8E28FF8E7B60DC1EC1EF2088A5E41311E9B82067883EDC8BCDDDFCB6A
87C35DE6FA9343C144A726004B7ABFA556543EABD0412A257D13C56D1365DA81
125A10EB80E6ED8D5EC2F0D14C82A66030D729C4DCF2E9E0ED2A8A24A32CADD0
089AC552E101EECF257B1E9BA408B46799AB7E9AA392882B7458FE7034B55107
75165FD9692EFE3DFB24004666BA7363C38E43F5FBEDFE9ADF693AD00B968013
E84ABCC93905B7C294D123EFCBF79C918A76B716FA2E22EFA5083C847D474B33
3793E22ADEEB25F859C61E04748F0691B5635D72A1AD8ED88A374BFA324C25BA
C1EDDFCE777B7968C113A9D4A53D0FB7A4EA0734CB6E8F380220970D4BDC1EDB
90E2CE078281B3C95CCE2518D2149B35907E453EA6AC9AA63CA64F58AC892C0C
631E4FB4705C77BF2CEA825BE3B8989D8DCC64DC7A263E3FBC3E10B6C6436884
1B113F221A6BE3E3FAB2D1BF7AD23CA9486DCB2C6B3F6C9256F83A4E96F87055
4ABE90DC9F4EDBDEC5B4D402A6DC3656C33CCA53A6C9AFA0364D8A8822AC9691
D1B0CDA5A6B25EFC7C126CB740267B3B2C77DBDA49C6C7CD018F1CF5B88FBEF9
9742137438E51623CE0E21C27B6B2006EA99B3174459E7BF82AD59FD366E775F
2BDEFD2366D421F3AA230DBAC8CA9B123F8F534C157498B0092A8B31395D9C79
91FB310C65922E86F99352A6DAE67DF812A28813BA8D3D99207F91BDACC98378
D91F34E4878F915CF508B9C1DF08AEB3B2888C65AE25B9513611ED0874B55A2F
393F513C09D57D1775AACA17DB5B7BE48A9B9A437A12F4D60FD0B58881170108
67477024B42BC972B81AE5D7937BA288E6F7F5EF5F57700A71A73C6C9FEAE12A
C083BCA92C8994B9C767160339056B4FBEB37998F13F0F82893A7AAE17395400
DD307D33E834379B3477DAA35D4F883553EE29D98D46C6E9A9820018368E7971
2A598382CEA4935320F972462CEB9C9F8B27FA444C14E3D8FA01CF7F63591F80
E1281C37BB769E68A4821E48802F50EAC6B212EFBEE269CCC4E8AC0116E1E954
B7D91BCF0A9B6F324D3D0624F94540BB60741A52668C3F8C60BC403A983B84C7
B062CCF8251B5CDF2D57D0AC1341F0323C99FFAA1C115191607AC2F05996BD84
A9BDB22D5A7085BC52709CEB7B507176FDDF970AB028CF1B533E499EE4C02851
843D6FC33600564D9BA21A98422F30232F71F8A1286C0DCA9D595A5015E72EE3
D8CFC5DB880C359342733A7613BAA0D7EFCEECBF0EE82B7F9007BE198A39B69D
6420F91539F85DA7DA90968E1780C5717776885B691A3C6676E5463D7ACD9F22
14284396176C9DD33913009E441EF906B59C3BFBAE587D113E93EB4E2531FA6E
2D0D661444E59DDA4823328A31770DF3E5B7E6EFDA4A51BDCBC829C038EEF4F0
7B14F01B02C1A4E8BE81DBED9E0C7247962F244E4B3EA74280B7101D384B1B4C
B192EBDDD9C64292AE5E1BADBF96AD2D61D9FD8AF1284A1D19B8A8F7A282AD66
7DD1AA4D27665BF4CF688A1E91A7684AEB23D4F53C08313EBBBB1570AD58E09F
3B369A7D65F430E83301544A1596FB497EAAA77F8C6FAF068A9D8FA5C5C34B31
45701FE538A01FC231EC7D8FE529599D9A44FD882E692EEB4A6CBD4832C33C59
91630F9C4A607450E82546FC0237D63E97E20B51BB400940D12507B823BA9887
5C002332D592429DD7F13A33FE49FED460A102B225FF51C3CAD527A8B4FD0C1D
5E62A860C77CDFC3849E58F278AF879D60EEDABA068AF2F85591F15357FDFCDC
BE0CD472F226E1D77EB69563510C525D05E195960D0EAEFB7710500F6EC0425D
8F374CC51FCB15600FF7A49A4104BC29AACB1DC0B686ACA441E316ED0CB3CCB6
ECBBD05FB82F4CF0E8427136EF4E084C43A664D8E8B1E28F04734E91ECD9A522
5580193A8EDB7A580F303E2E04F2A7157FAA847DA5821B3A4C96FDFB35B41D81
435ACCD31E647E68973EE8C6A817FAC3D9F6CE8876D74869319586A52736BE2D
E3D62AA185D89B75F477C1C4B59F9CF7A6929D494D8CE23184F918F775113E78
99759987EDFF2D519AC82CAC231126A1CCB9E7F56C30AC8709634561B227655D
E3587BEBD9AD03DDF11A158B4370BD2D1AC26F85CAA82D883665C31B5361DD03
533390EFFF47E938EEC96B4F683869621B7B86948DE5A1E16F5AC080D414F3A6
1388126F1A08ADF072E5672F2731E8014E005B335C20E08EB1F2625057AF32F7
3D11356C09B7A353BCDDED6C78DBCBE23F64520ADAB6F2E73DE030B58CF27FB6
E43655FEFC42A08148A8FB31CC8D96B695070C3C598574D35B47F360C09C0F30
166AC1C0EE558579DD91F6EB1BE1874FA949C0F42A4C0EDFB2F946F8C2AF6321
CB215FDC63713FA202A32919EA750AFAC3728F05EF2627FF3F4CBF992256BFE7
1505B73C16EAE2BC1AE37BD4586C793B4E7904D23627E2FA765DA5EF2B204D8D
0EC8AB2AB23D244FDBEDE098610F35EA1C6CBC04C2CA013E62CEA28B6E3D5C43
21883730F4991430DC671126FE078F52A0425B62A4085F829B9F9E0B4EB19FDC
2D3FAB52EDAA65068CB981A790D432CB235D4B09E5AECCFC2CC7A1E83ADECE29
9D92C99C4BC41E46F154DC457090B614AE3D9E1B8B40B8FD8B53C41B6E378250
9592E9544FED0E6D704D4B52F095836D1C90195742D5AEE902253AB2177D713F
6C9D6E9D1A5E8FBCF32D200E0FAF75E23B24E051997227CDFA49FFAD08CF3B2F
C93054520CDE24D4884EBE090DFFAEFF608BB85D0A081D54CCECD79A73BF43E4
CE3C4C0B04C90604285D44C6C2EA4D797568761CB90B6D646C1BF6059A1AFC17
A51E539792588998C9A4AECC2192CDC541EF8518BFCBA0E1FB86FF330D7D4DD8
7672765FDBC0D614D0735B082802BC870719D401FD5F951338431A0D5BFCFCFA
D0E11E7B7984850350E764479A66E9A38E77D12C2515B7796C0B3795FB61AD00
7F684EBEB008B52B2D19B72F59D14E85AFF56B0F96300F5DA6EEFFD777808473
772B7C618CD271770D10A1C0E5BB406AC1C2D26629552E4FADB6B5ABDA37F9C5
EAA708C0BCCF0DC1CEFEC864173C658AAE7E8B927CB4A46D7A941004C286DF51
12E6B0E86E49B0F71ADF611C76F783751852D77A8765FA2535437775C1FA0B67
FE53B69A7053F7B6EB40AAEE3179C8841C717E23822CA6A8DFDEA7656A9A2FDD
FAFBCC7D041C6CB7F8AA6D98F44CEB4B60C271273945162D5226B768C935B1E5
6E140855DF9914F546496266E3EAB8749E2E80BD051118DB07F9B53D3BC7B0E5
AD4D6549A3C078F90CFAC4832D53FE0EAED188F38A648AEE9107AEA87829A29B
7638FCA460F0BF18E744D90ECAE777678C2AEC1BE0F3C5C19FE1FB3E890F1CDE
6054F0743690BEBC6A49FD4C73061EAD4FBC465C7DECE333CE8859422E93ABBC
A913F42240493803D47C96A2745580EDC957AC4291730A81FD1BAD3493874D67
FB56FED2C58DD18152F75E9E3A637583D31928C870512F628D998E53AF47E4E5
41A01B9AB1E4408B2B3F92ECCD384633B1CFBE950D0C420E2AA97C156304DD03
CD20842B335D7FA068735311F96609901AF3895EEC9052E9BA886A31F31DEE53
AF2336D298B8D3F361E85A09301C445C3D82FD3B3916108E22E96B19780D2F37
B10826AA7F8D15F5A74F536B4F63EE567926FD81D6FFB231A076037755496CCF
8F1E0A18748334F0E3330146F527C20CD636DA095BBA1D59795A53284FCEDF48
C45C10A2A43980227ADB0B64C7CD06C32893EE05B526AD5D4999C58A76503524
5D569D5CF70DEBFE4D6082CA94AFDE2B0315C147751F411DDC137DF414188E75
82360EC6BEBA4A5A7E1A197093DA03505111C7471C53D6A971F1B925B492C0BC
289B8FA24DD159D2F780C14242CF631E523592E615B6E462A96968FC34733D4A
20C36689FF9DF5CA9DE174977B6B003D0F513A4A5995BD0ED7DD0EA7E49456FC
9F75FE6218E090422F747DA13623BCD36EFAB4FC7F2FDDDA21E73595318B43DB
FA71EF971F3EC77CFBC28FFFC95664F4302FC6ABEDCFB869987DF3E2D62099A7
BDEF0391F1E5566BAA5068A18A4E5556FE9005F75DE110AA003A02934991E2DB
D81381CF486C494324B791C8765D7851E13C6AA6926D9B3983B7A1FA6A863B50
639AD7BE7C660234003BCA6C3AA6550AF30DFBB3BE0061E7FE532D9C9F0074B1
674B4F4D2A12D1D26C3C03D824F7A56AF8C590BFEFA1704FC3C55DBE6D2272FF
79F4ABDD8F9032112686E1A068246F367E888329D074CC92509555BF954F44D0
DD8C9A38ABCF7A3AA69A7E1328D81EE6302C0AC1C7CA42EBB76EE9CBF31E786A
99D768F3B68A7CE709BD318EE4B9E16ADBFCFDBDBCCBFDBBDA94E5F01570E1EF
50B27EC9D1F0744F2244559F774A0F249D55A9024C265B934A0857ADE729C275
47BF62ECB5E25A0AE928DA1E4073F2400FAA305C530AA0FC93815CB4580C9F2C
CED8369739660918F5E58B697E528328B45324B1DC329E73653C630B4F5DE97C
5D6F152DEA528DD00039AA562DE4736E85D57BB033432F3E629362F6E630C689
EB77978C90190D7219684201B8FD36ACB79C7D1C81ADDB134A04B2FC6E4EA0CA
0F5964865498ED99C406F4091E47A03BDB78B4D4F95A2D23910752B747C8E70F
68B54FDEF04150B07FC15FD4FAA2CA42843871F135ACC0ED15970247CE86DAA6
BC0B8E84B0A8DA8EFF48B79840BCB88BC525F19476424F7FAB4B591C72940D61
091B4EB202F6383A8A99731D19B47E7C2FE3171868A8D8C06FD5A5D136A9254B
FAECA7D35A79B6D617CD9E0ECBAD31AB83EAEDA618C7F342FFFD461B8B60A5F1
11ABF2CDB745ABA11C62B24740DAFA74BE89FBD98CB518CB6392C13F1F442532
92A7605875AF32A06F8D99F925B937ADABDB805653B857C3C1960831BF00BC2C
C374AF45AEF48372ABF228190F29DB522919CAEB4DBAAC9BB84A4FFCEF3787DA
025883710AB35E56B0133A53DAA809D4B2017D8C1AEAE2F9526F9F6BCE1F18CD
DE469B4778E8109C0F0EF0EFC386DAED557674069955FFBE8C0B42FB0DDC72F5
226B18997BE8A7CC4D5A0C517EC3D3B49DCC343335292BD43C8D0B7E42AC9969
7B4B5BAA4E553BFB219E021E9300E4D8EC13C0B542DB50991CB26D44DFA09579
776A494A7335A2A07B20BF381DE3E17D7DA7383ED27B7BEDBDB1D0AC05ABE2EF
A1696B85C7358E7EB05B2A2A87800E2B97793E6E16BBE3D7FC5C8511AB16C0EE
3065B02B9A869391403B0DCD7FA50821CC2CBF04F4D17BB291EFCC981E25D65E
1ED74835415A0DA4FA3F536D37CF723F76FD7EA1EF704A4D2EC6C864CA273C2F
B78442FF40A9A4A949376BC802BB1E8763F1ADB27871E711B7F08FFB70657A1F
717B9AB957FD3747281A4FE88655F94A96E4769E69FCC66A70BD8DB9593D66E9
D37709239B3F21DF0DDC5E92FABE45190010DE80FC37896966A4D112AA3F39BD
94F2EE89695EE01302CC0F1336CCBC7E1EA555A3A3EFEBC232B91CCD5686E539
31903BACBF2DC681D176A92FBC3804E3CE98FEEC29F590EE85785B30EA582336
8976ACBAF5037EC16D44B673866C94174A7073C12F8D9E21A03CF4F567C5F6AB
34F5106C1DE39F3AB3980DC16DC29F75498833AC7C51B0D8DE6B9C22B9A0F529
EB16D0A9CB150CF9EB533164FC7918779440BA77E8CE680CE29B570C8BDEFF63
C9EB548C9A2A9BC7262C9BA3B21C204BCB98C7586A964C3D52A92B55C6B99221
1EC2D3F393D27A1BB9D139A591AA3CD97E1327B3A9E4EB96907824B422895561
0BF767A286D5C28ABEB836F761E1D3039E58861AA365AE37C5DA24457DF7F2AF
4A13A48C2E3E58C8D5ACDD21668DCC40293044D6405F59C5FB3DE86694FECF1D
3F47343641064637E4CE0A7E11C74DF12905A2BCEEBD18919CC50932A445A00D
0170FF7C450BE9CE6682C15D63EC8E5D99CF17B9916AAF3674EED2C924CD5AA7
65DE43718EF676471762FEE70E8A9080051DC0F2D47DE8FA7AEA0077665EE90A
31F3D9A9DE72FC5A8B52378E7ECCE82BB353C65182B961927DE098C08A66D1E3
3FF54A29BD605067EDE6E31E85314E9031A6E6EA3C9D5D4269E2126CFDD6EFB9
CF5F432E37CE6ECAAFCCE297DE8AF6A14C7792A9DA4ADCAD6C3F8A80A011F4D7
127CA67B6A9665CE18A22F42FD252E9A1165B4ABE31F7D7D6F5FC74311E1C17F
F59501FD94988B3667BDE771BC62455181F1B1B067DDE979AEB03ED435197A7B
A68D1ADF93E2D1796863C6C2A74A199E3B32631D8459A2170325114C59856E25
7A6F6349E6D3E1FAA97E4C3FDFB6AC7F7DE678CDCE5DE0177EEF1C723A236AED
FF56765FC45984DE96D4E94AB801AF0C7C17D580D8BEC6B00D855CA9B8453168
83DBE06537A8F2FCD32C2A81CA055B03FF63614AFF33977AF96951F6CD17DCB1
0FCFB28141AC5788ABB4FB7CDB18EFBC59F0D0C1F23290D0993FD84B4FD60CA1
DE0D6DAA367E728E5010AE20E46024F6A2650C4A665EA01F20189E16230CE561
C6FB52D55D2C953BD8BDC13F1FCEF812AD00A931626533380BECD9A77158110E
3D16054823EF5CB09BFAE54328AE66BA54667AD62FFA63649EF0E9D159BC5086
CFE6D15C4CFE00627CD8309098C7871CCFDD2E70DC54A2A26B1D78582A33F532
481524ACE2CEAF405F4777D344C4ADF44538F045091160DFD4A974F907658436
359C2461BEA57F9CC512BDC51EF25496B125FD62A9A773A525380B61C7DE87CB
740D0BDFE4855C77AB160D55D1861582536A7B4AB7B90A9E4A59A72158961F87
B638C5B191EB96BD1CA41D6D36E8D75702DC2B85C2FA9A72C364D0FC44D1556A
57DDA0E73A6DE96946F7A0D5EA576DC9E9AB838AFEECEED5B387AD84597865BF
A4A2FBFAC9AAB39662E6D1B7273B975837A009EAB550007ED0426B596122454F
21507BDC697A1C20A11E5F89C6968636673A031C4EB04B3908C7921A1AB734DD
C387D1F67D2A3FE8B8EF68A5C63B205A57438F4690221FE76F550C5C73D8A9AE
18CFF4C9D0A3C98A41C1CC482A019B586973C25A23B81E41DC76A960213D219B
28B56B22AB4C043DA51142C8A67BDDBD597BAA7ACD655DC3002C1ED7F69C047A
5E1AE9EE41B4E033EF66FCF240291EE3BFBB78F9D721761ABABD7B6678F04F7B
8C0B2D6E80FB159CCD71CB48A85FADB6F7286586D1DE7A371D37DDC0C7A71D2F
9FC755C479F9176E842B8E089ACBBD9DA96381FC79067A508D78057EA80AF988
CD615319A641ED197EEBAB5246C2526FF5BEBA07B27CD2693C12B970FAB0831D
93211E48D1B82FE44C2E882468A9F686824DF8DBF06F206189130EE7348CD21C
3E13C6DE822ABE5DDD52F68C8171804A8D2F25B5804C2D3472995C252C276741
7C96495B40E5C55FBC81DC7246A999E8ED6A11315A7926538D22E4854A274C74
7B6EDD7FACE8349123EFE3513D141C31DD7109BCA7E9DED6805FE39479BD833E
4CEAF0C88D9A0A7BC8514C2B4ED61A1CC91395143592413CECBFA91BDD11795A
6488FD29B989FFAAF363FBCD0165EDB29AEB185E7CBC4563F52ACC4B5DF0D82E
BA31479C7175C4EF0C2C8661F6E7523E6288AD18CEAF0049A2188A50E7261C16
2CE8A34142F8C81080DB9F3D8ED49F62E8F3ABF5E45FE00933038F1B17BA1B36
80FCD1EDE354ACF22D3A514C03BBBDFC647F66BB27351212FCB66B4CE9737687
055361156CFFE6654F586DAC3C2732EA5C7722C57193A3F96517CFF904BA2676
748644105038841988EAACE1E782C3DB39C2721920D20C636A3AAAEA3274474F
B3A3A68ACF4E48AEA4E44DD23AD5437110523A77487A09567DB8D0273C53F08C
11B87F7F34DF5BD6232B0B73479ACB608F8DC52CDD6C52BAD1A1502779B638DF
933F2FC7A85FB739ADF0B5B16B62E91712C9274F718632B91D8F804230788460
D35A12C53A212095E8459ABFA31C7A16E7E4B07C12A28AE03BE53CEF9894EEBB
D3459DA2F8AF8320061D0D899EE1D159EC5B7845762DFE0037BAB357F02CB1FA
D31C60B565F5BCFB14E7F8E4B997BD9195F790E34C760B1FC20BC24E05AD6F4C
749DFE784E15C3734157442A161BD5A9818A95AFBD19A49650B5BBEF5FDF1415
5487DC65939F04DF25603E4E215531C9A327CB98A914D22E25B41FE35179D5E0
20790534D6BBC6F512AEE9F13F7B178DAB23BAC475BA70CDB2554C11D72E447E
551D1193D670F151AA96F678ACEA700035D0D92D3002B9BA6ACF58E8A207CB55
368FB37E1281E0C88B021588938A3A5F68B5DCE64779760C14170CC7B94C4AF9
5F7E0B679C0D5FE02E0CF9AA45628844A54276FF76447E9A1B860E1085D81B87
8A24E96D6E16583FABE2487B24E484023D78E9DB5A2446FF209D4729BC929A94
2788534B0E643A05643E8A83038029E832F016A7FD44134AB640AE74B8D924E4
8E8EEA7BAB1F7EF9D23EC7BA2746280FDDDFC1EE81028E13027F26BABF3AE38A
F0FAD717CCE9F638ED284BC5997AF8B3AEA37B570C5A0B563AE33994CE686578
051B8FA18607195141C582FE8E86408EFCFE0B0E04C9FE4EEE7FDD86D0996B5D
111D5610382B029EA8A7323F271A6643341F7720B16123685F6FBFDA109DD718
1880277CB69B8FC62FB350D208B447E3D6B316981ECB563D4909081B3495202A
234A24F63D004155898A4ED263E28DB03DEF6CA005C53AFD0E48F581984334C9
35581DA77D776D1F90EB9C33A33063CC0EE57C97BD40D18E0267BCDA5DCCC8C9
F3FB3FA41147060F70652222FC11308DA39AACEB2C15E617A553607F5A4797F8
50EF6DA9ABC92C2CC6DAC817EEAFC6E54C0F10795D6DCE4ABF60673775EE6B1E
48DC653A89EB1B3D3CF4F2C664871EB1A07B3A6946D45571FC760DFF6F5F85FA
A45A1675EE98A1F25F640ADF732D0F3522AEFD51FA58FE825BC54EA5B184716D
9B3136AC2E7C2B34D2A009755080E6A912C1995C4F548767BEE356803EA7F14F
C219BEE7F28684F2C4E0FC0D4D59A75FE8DFEEC838CFD9C7833BFD97782599BF
53A5E98877AEBB4F2B057D8201C0F6DB1FD83F056774CC7F2283B249B0754796
0756907069E8F87271EBD508D02DF0D47145BF586978ACD8B59C0B26EB8E64D3
EA95FA229CA46FE78D9E9D0EC846D0323B4562E75C3923B20AA27C8E0559842E
EE62F05FDF6C538E8EA26A787D807513D423BD43AF9C4B5C4A94BFBC1282B989
F287F5C2D9F37432C7EE88132663A1B1264836F95D1348805303FF52AD7EC3EA
D6D85F94D05C54F40A9F1E878CE7E01A9F7E471DE401E32EC0A64F8C32A8115F
2DF88CC64903771146576704D431BA8AA16A484216A28C5BC327159C92E850E4
506BCA75EE4E82D99D8320AA0393AE50760DF0C62D2135FB772CD2D605379609
CDD20C31621F8531A4C054AF62F519FDB2C6E22AC15D3EF3F7B751345760B119
670DCFD9485AAB66B3EC91F6C95D40780A07E769D946DF375A9226CAA58CD032
0ABEA03781FE2D6E6570EB3B6951D14E1FEED8CB180056751754F0AFDA89F25B
2A6A0C927882B9F63911CD08ED09645878550BF0BABF0CCBE45159C0720206E1
6827DA705E3C4161539C64C43164909B0B9834CD11F6CB66A5C8B93B4F97DA9C
23F2C14DA8D34FF2094B444A1AF8B0FBB81ED64FB6BFD2AC915AE42D640B7CEE
5A60053A8F4AA09F400EF497B6B8FD90ACDBFBC8B1E318DD99E5CCF688E849EC
AD7948262D01ACFE1A26E6643760D49715EB172D5D4916B5296D264A8C8BEDF8
5A2BB2EE693BEFBA9E0A0D92723B1E58895A5873E859C8227F4829337EDA068E
26DAACC09B1DA11C63A731BFCF42EB97EE8C69249420E279305ADBA3EDB454E2
63EA9B299E52F886E740A84A59570B28B885952404A8A4A38C5980E93B4C659F
F65E59D265040914EF04852E9D8C50D9BAD7E3D516D09D386A4DAD702D4E3AA4
4F9151C00840807E3ED26BA2BBEF66D6F9F6B7C3C2425876DC657814F1801F99
E99D932E3C27F78BDBA4E6FAFE421D8743D80BA1EAA9EEF8BC188B4B2A5FF260
8EE2CCF53F176A0033A91271106621C09F978B63D9CC6ACD61415BA3694E692E
9B27CC10A27EF9E0080E73B9A6FA719A57E82C3F9735CA19ADDEC0D0AD5F9D7E
31EB38BC89D662FBA83308D722085BC88F283D21E6D0E9B2CD3BC3236552667F
5862AAEFAEEFDA587CB4F99823A24866D7177BFBC437BEABCFE99CAD99710371
FFD4953C2C784C4E3EC039FCC9130DB6F5F714621BEB1EAE3FBA7645AB579FD8
4ECCBDAC4F070ACF6DC038B904C875F407298DC55C1B43EB9623DB3608A5036E
8667D4C460D6A81414997ECD40FB6794938EB0267E52474998E355953C28CE23
3B22ECB28620E0A79566200A1674C7A2D764B7BE25F9F811A4CA41A240862FAD
96D52711C172ACDA37C39BF7900D60D70C20A620847A5BA1E58F01ABD3274CE0
BCAE891F01FC60C434A19F2B59DBC5E07BE217096A26AEF0A59D4742AD1A3E96
013D3F15C87A2E52ED804CB9E08E8CA73576D59311373B35D289F6A6DC777983
C051AFC7F840EE8A1FFF0C6D879BB3F78B364DAF49A72D5C267E3354EA1430B6
90A02DDE4748C0BD5F348BA3F16DC85570396171D3F990541633AC56553CD174
669A7FF144A5ABD3ABB9A642F82883AAEE0CB1328CA22254C949C86DB3BD2A11
16D4B229BAE0CD70F0603E5AFA70F8289C438CCF4593DB59A6B07AF6BC1A1889
51D943318DCB465BC0FBAF8D975EDC95A590DCDDC43040F88586C650D3EBA840
CE57B5668565A67812E4B951B9E646E73267665F83263F160295174F5B1C70DE
A6546B88D2D7B674EBDF463E5D9BB158D8F449D2EBC761320F702C17C7D91A0E
848F63D02CBFAA58F5C0067509B1A45D09CC43EBA91FF98A7BD238022347DFB0
626EBBA644A3746E686AE33E769CE7A7414BCC42B60CE20153395D1F42AC8B2F
E50933773C2B01C788CB2EFD8E9B78A8AC56684F51FB9A201CB1483E321A2F39
21FF6995BC51BBF1D0CD1D86D10294055FC0AE093B74A454F11A6EDE45219002
1D6AB79E7A1478BCD157E252230C508D1F967A0B57292667580389A8CE3AA1A2
1969E4FF7C3D5543B10CDAF9C0EAE20AD7A13B68F0DAD8BC8560B8B0BA711541
2A0B8A384EBC5F7000161D53B62B9F16BEE0BF9922D23D1D76F2CB1645B064A9
81AD2DF0CEAD5A3007618CEA67D136543C44A85AC1BF690A24BE763EBB98D8FD
89571CD4444F4D8F2109E7185B0DD3F91BBE7F71E80FFEB0880F2E4F3B74688C
9C1A93C0DF9EBC6DDF450F12C6B86334D02A7BD4FCD6C5190D609D26785B3E58
A82D9E94AE0A5BEC8B5C7B4B626F85D7C431CC1EF45E7241687E5CA7B7519FBA
510551D5CB4E2B77028BC084EC102DED46A45A1DEB1C936384AB8CF6090FD155
7AB264106C25088DB1C626C38334AA5DD2437FB3C4584A2C11D8F5AF204269AA
214B55658DA1754E3C5E41E6605B904DB9F1F074360C61843A709AA9F8C0793C
F80FC9364C0B0A52331ADE9075BBB654329DBDFF38598A9A44FAD8D21184F7E0
81DD0F4D0AFD2217213E6924289395EBF30600227F2BDA54A65B8902223421FF
99BCAC2D54A556B60654A0B61016E513660C158EBC11C0136098CEC2D98CFA8E
2EA951C77790BA2D3DE26BFD0CE304EA9600EF0D77AD76E24B85A8EB6E1BFDF2
C96A1807BF477F66FA486C43D40103321D6DFBD876C2EF8115BFB080B2E13005
DE38FB0560FD9A23DC3C5C9747BBBA33F20DD9C363DDF58C92D4661F229CD59F
542D392E9CCE1BB3268B6579AD347A602220FB01C7116816D801B0925AC9A0EC
EA80FF2B50386E7E0A92EC3925C07137027AF9C07FA64CF14718E749F91D49B2
AE76765A8FB34E64CC96B415092F5E58FA4B5290EAE9498912A1AECB9B04906B
5B12D75C06D938A3022D8010812D39AE82A8998C0204D4F9FD61D7004F9334C7
6E64B4994D401BA6CD3BB2BBB7AF20A3B1458EA90D6823C12E7D032F191CAF51
DF81EB73F73209154DB26DCC8062B8A3E6D4FD4EDB09E651668C3FFC7601F639
FA7B4B768D6C51BB02BCBF334E1B8C401304C8527BED6290335E21B654A2BD29
AB6830403FA943FEE59530245351F11AF86B14878A6A35349D6A747DA650C474
09C5D675797E59CAC4BBAD2676C0B582372A08823BD52EAA33D77F56AA9FEF0C
D981537A6D5A5178F4DFD5D9382926B7BBF95FE11A8E4A53E0735C1238FB6852
0AC0C38B16DDE6488D97F4AD4FB8CDEEB46581109373BA5E87FEF6957A6D197F
65897FD87FCBE3FEA73D9B8291C4A7385C9B0704149F96830C45B335E67A995A
6111E3DF58F6FA1F920D3463578695D5AC54A2B1E496B370C97FB796997E19A0
874B976706FB1DAA237958D12453F26D420E78726B258294BF6A8B1233DE46B5
7650DB332FE7AA7AB06DE864FB46E2E876DB7BD633B37F83DF0C5F188418929C
A8B92AE76BF66ECC922E14126141AFF7E57B82E05FDD5FC42217CF95F1C17A1A
86D8A00ED421488A4EB4329FD5C50C599967BB6E71BB63B2BE4D364D22BF8C5F
F6691237EDB660CBE406E82CF200C3E2C05B02870F789CA97CC1DDFA9A2A9519
C32D297BB97EC92D1210D93E6E4586AB2DB41C5FDEAB9168B6F35CAA0237EAFB
0248E5953FF58EA07376929BFE666D6D79DBEBF04413D4034AE1CA7976FBDADC
1BA6F5AEB33D061D3E811F6819510E51562C183A116A6811C0E6D89E183F6718
CE26434506566506D04E0F418E8EF7BD084AA3FE5DCA4B809E35A78EFB26071A
B0E9F1F06CD897C127207CE52FE25EB6D2EE63E53216651DEF0380C909005C0B
6CB35488BBB2416516AC9D81F4861D5CC7D1329B55EB666C886D0448599500C2
83DAF19CCF88C5ACE7021258D77D82A8F4CD835237F259733030AC3769B27BCA
95B6F655020E29C8E1EB18A01D532E667C305A2FD7837C73BC293CFE4083E591
CD043CA269854F1B26661713CA257BECBF8D23DA72C1126466594DB7E431FAD7
6C4C7D346ABA787D93D102ED35E00B98D4FFAF9C7D00D9BD33C915B7AD77A867
7A5665007ED06430AF2B5BE127D37704F808048599B2237F2E88D4CC47A358FD
E0DDA03C94C476089D2F01A72908AE3DFBFB4A634DE0FA4891296DD57140559F
5BE509DF93B10FE2F0786E9794976487DE08D97E3FB5577A8F49EC6B54DE97DA
D071284D073097C357ABD25D6B8D7E5D316863F7FD2BA749AEC6FF99B7B728CB
DDBA7D61CABB81D3A30F918C9EFFB0DB951A18A35B5E48B07B8A729665A25B4D
B95B287F2643AE61EA1D3E2DA8EFFBB46F418A8BA23DA137877831AF0DFE7A7D
AD58D202016EF52F14202317FCD84918B24C3071DB593DA0772BF7B11514270A
03BDA13E988608AB646D70378AD1464CA70DC6840264C9123907D59458059C13
312A62699401F0AAF370AB403085C95D368C401AAE24FDC7F858C259D4DF704A
3D9E741168706DC14009836924461611EC6992535EC37310804965CBA53DEED4
1528B113DE746615C4DC5822A79478D45587D8480131F84295447D5243BE66C8
40A8623C540A41265B37B9291CC1A6E17D67229A16D14CA8068013B10923BD83
6D267A4C5873B776A60B0A9CD5E0B53B01958B0CA8C6B8C56F2F1D7F1278FBB7
5D63BAFFD0AD54F4563E0161B02D80330BC6C86551A069CA95AE0EB2F1F4470F
F238FCA89FB534CB62F4BE3A17071CCBEDFD4C3F48E3426BED9D20E96364B1D0
40DE021E615B870262C23654630A94AEE74CC3869D2EB811A2D7AB338DB33054
BFC441EBCD00263000496582174FDF3CB2300B4F0B810E1DC3DC11F6D90C31C4
0BBED65CF0E08AA369896C7ECE4E6E96BE2939D1AF5DDFC7AF3C1CC892ABA460
A2D403B546579D300E74DEC261622D602F8EB82596E15378667BB683503B8843
978EB33469691A7A9E97D674352DA140D1F157B8988DF989D0251018F536B32D
A33422532B983BF89BD9575AF3C98DCA3381E736D88BD4F7A3CA02037D63A8B9
DD0A18E847011790F06DC22AAF6C48022F0430D37FC322422B1E2E2D33BAF5E9
1F6AF5A9EC09B8626B87CF0AF02110D167ADED20A87574C680789B9BCBA611D0
E9EA121FBA5E9711CA284C510427BF64FCBE2991656C286922667634BFEB77BA
3B60A1F28CD01B8427C73E20DDEB01FAC8C862AD1CAF1D07604ECA47DE52D639
819C9E6853C96301E7B8F0E980DE9F1815A55F688DF5FA3F519F60C6C8329E03
0CEFED1EBDBF850B8AB1BD9AC7086AEB1CB8F9F680DD6257576346E8914D7530
B7311429E3514F3BBBE89E1D11A7BDD022565A39DE357C1A1543FB5CEC4EA00A
68AD6B8772D0DE289F862DA310FBAF237E090D234F773ED8A1D50B5E6F4575B9
80A9F785CEB3FBC51B2B7AC34E084E2282F719C35FE3E533193C97A57D050E6D
4D0AA1BFEFBB46906E515F8AB91F365FC8249F699D53641797E39CFC90428DCF
998C41842FDE864E6C0A67CF46F8C15C58FFFA46E0E86CFC2E0C05CBF4D95CFD
6F64FC6B90DBB18CF44FD2D8B94EB96783F293895490DFB81A65ECB5D2D89FEA
86021375BC5D42C8875EC2CE3168B71B214CE484F2533F9E4EBE0E18CB72A93F
7F060FFE21FF47D84DF9265A366F53B7868A56E92ABD9621C91AAABA1D50EC2F
60FBD3A1BDD0BE929EE5602EB874709B59DCD3F227E14C7D259091D74BE64BFB
391DA04F9056C486C4AF5A6394DA6129EB2ED48FC679C9BDB06CC4C5C1C17405
AE1061064C192813BCAA6AEA944AD5C740180E7FB5F0F71AB47053C62B912966
EC537866F2962D3D0765CDD89F7EDA3FF3D7BD8E4FAA55C39953A7AB0160DBCE
B1F40A98765EA41986277CA23B54958E0EFB074D97D62675CD929C98AE029BE6
FD8F57694820F722B60DDE856A858880873F4891D37571B1D34923A19B1743CE
2BDF0A529502259C84F18A304E47B20E42DDE9C62779E248736ABDEA7B3CD306
B5C348F72B53F59FB37F564A6C90F429D3BEB2011E86B8FB440EFDA0B7FDF3B3
4F666F6E91AAE8A7F4A93E76D969DF5254B4A3F026FE825A65AE81A7834CF10F
34349E1D7C0979CF65DCE60653A4B2F08B13BAC72D5D57076F595A0FCFA4FA0E
6375947F8DCC9B26296657E7F0FEED8EF1B581E22498D5D0352A7C826DF49366
381663C33E0945CB35543F45B64469207E3ED714611F8A5E6CE946B0E5DBF4F2
1E5579F2CA47B20701FA2EA5174578D7587714A1AE38A9AFEE45198C386AEA73
8F9D09B20F4E0CD63A5A2562FB5E54EE668F300287A1D7CA98A1324122BE2BBD
0CD358B4BE6517292C66EF471CFFBFCF51783E1142F6E682295F101C195A1769
D7AA524B56B858B8B0687BDA643A8C3A550E551502D07C97D8D7845AF9CBCC00
C6E033CE57E64863E04F0B7A90F3CCEA7C5869DE5860B5E48C742A4657A28B9B
7B807DE8F3176662B9BAE7DCAAB9B940E13AB55A9D2D0C8447520D3D07FB169C
2B0B5693939A33970FD534CC97CD236368240435EE0861F5127405638CFDC1E9
D68FB977A208C7892651F4D3D6A741A1B72C038297EC8A9760BA124AE0FC5F14
A5BFA551409E28AF25258F02195A3D20094074B0BC6C05F216E2009FFE57F615
8CA1D6E801C082AEE90381C2514D90060A8DE34E89823BCB0C43BC8ECEC860EB
18F4E3EB756FA0C57A39AACF993A736EB7D20FB58DBE36F599CD76D4428E52D9
FF1EBEA43A8C385F39B69849501C17C60C20683DAA3F143E3C970480AAFDCBBA
FDEC65BFF45FA28C3A6F97C7F6843678F95D7DA8791681EABB2A97D5D955DBEF
68329D5CAE9EFCB5F579503E50AE678A0E748ADBF89E9ED7B15B7B2D8BFFCE26
F052BD51AF2622A474975607882D39A30930DD5BDEB0E7E2F3CCEDAC37165E48
D955D28007C4C1EE5E1427B38DA38D3103E65684802BD857E7129353060664CB
0E45498CDC2A26180AAB0C38F60C315723B6E10134A30AE1B9BF3CE5ABAA0E95
01489418C7CF5DA0C1B0B523C08023F482A23DCB86752D7A88020A96FC3CE147
1DF76254856A62382182BCB319201D6575160A18D2387A783D8BBE676C3908EC
E9272E2D79633E3E82690CDC0B99D0F393E6A1C40D367867A95885F6725B07B2
59FCF7E1641550020515C5CA3A81DCD4197FDAE9442E0EFA143255CCE7BAC5F1
E3A33F878ED2B7C8281ECCD0AF1AB105891A22B8AFB7E34A3DB72970E2D8C2CE
7F3F1DDF55DBD314B2BA8B77587A0BA391EA64D5079A9E56C1E92C078FFEB3A5
EE39FAB9C2B0B00FCDB966D35F44D51652E35C19511018EF633AC749534A649C
FB8058BF2F3D901511E9C00F8391232BDF03467550316B28C8E3700E6BB0412F
A65A0B8971B673FDE0DA036588818F59E2F37B167363CBC39DD5717DF9F43629
07D3D92645BA06D1E95F000C5907D7FAD275A4FCA757C8CEE29EFFA7331D21EC
89640CB0BCB119418ACB30C6A87DDA94707C0CD7A7A9573DC34DD6E43EC49BF1
9BBAFF96F1790362AC1F9AAD29D7D1043D06D47F6B4323FB86C6E94ED1DC4392
976B7A7148E3DCF41FA4CB12CD6BBA48156E8E5919DC09391F31A0BBD32132C7
60ACB49C77E04EEFCAD511B1CBB0385090848E6C0607591DDFDAB58BED3765B4
A824398BE3160E3A68C5B2F15FBC4CDCFFC3DD110D1EE1E8E1F4533239DDAA2F
23019C289FCAD8B9C931CAF26F4C1071912F1B2FF2B0339C73AC53BB8F2CD871
183722A407F73833BFA74453DFEF729EE0A01879E664E466731A79CC5BF16AA0
908C61D557F550709C64A8297AE742EFC5D1A374E9B3FC245E688825F72E80F5
15EC2BE22DA8831B22F6B8E3818ACE63B905B415CA8122F2B82DF57D7A0012BB
7DDE879C5F544A47034B7CA7E51A3DA546C040983F4F0011F873F88AA055EA8B
0A001C8A1F518113CF19EBA1A31A7CA0CB9E7C7426214FA748C9934A1682CF9E
2DDCB8D499BC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CenturySchL-Bold
%!PS-AdobeFont-1.0: CenturySchL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Century Schoolbook L Bold) readonly def
/FamilyName (Century Schoolbook L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -103 def
/UnderlineThickness 90 def
end readonly def
/FontName /CenturySchL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -372 1000 1005} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737E58A44D27E2CEBB732AA7
B086B2B8DD516FE5C64CCCCBF6C2FFECF482EA924ACD036F8ED039BB91AFF1C0
2D2E2AF28EA2A9C4777A447DE6233C2615147EE510B0797F71139C736F890B82
E2AB20AAF4E24F87F8F0A4BE3E172DAF94A10158519A6042E70B3ED502247C89
1D8438A00B4E5A3398D57FE412A0E12B4E6939686665F9823875954569DB51A5
AC68DEB9FC5E8E42A42E0464CBCABBEC4AFBB399A5F3C035D9485FC620FC1EED
EA66ADD614AFDE3FEC96DC68B6BFE87FFD3A5CA1C65EBFA858A628163605BDBF
87CE4C79DE30FCDD65A32C5DC5169B082AABAF0AF24DC7B053CE19D7474A351E
81FE11DD9A562E90AC8CC660D454007C081FC6B7619DBF6C4571C5B1BE12602F
DDCD557579F48B39E4D789BAFA40029377B37AD4F908C2C93481B9A1D75CF6C8
1B31742EB4AB7B27B687812C401EBD79EADBC797D5C9BB1CB328A39304AB8424
3E1523254B522D143F6664103B41553678180638539DC244629C1DB71E09CD47
E03670839D325E525937F8EF4FC8D04B46A54056E30592CF28C4E81901835586
8D3C917C209DBDBB33B9975337E1A550976EC1A80790823D6E989AA51A83FA47
35B8AB74C1B9B1348C376CE8CB9EE1B6AFBD387F2113A0DEDE74EFCF7E559DD4
B99FE09BBE244CB60667F8CD02DC2F4A367B566C87DADF61F0D26D3DF982CB57
CB8CD55991FA7410D3A8597A442757EF8543526EBC3FB9EBA7C03A352A9555B1
B188D1C972577C37A6DE171F8D554FC6B4712561D6168434068281BC70D62890
FEDE34C73C36DEDE96F3EB2FA9F168146A63618E8F00C99EA09B0156B8F9EF6F
0F8AC2A86137FE542946D87C26C740305C0D5BC7DF861A4DCF420B717AD995D3
5CE4F9AFB00047EC3B1C4FED299BD991356A3B1696BA02BF3D91BB9D4CC8FBD0
AB3A090AB2C2CCF185310A052581179047BED5D14236C8B5BBCBD26FF745A16C
5C4A06FC231D88B1D35492895A570EE0F8B2A7F7E6EC067BDDB1C559F17FA504
D843C958FCF0B73B172E2AB08ED57F2E6E355EF056061AE04ADE6B10716F36CA
39C93736EB678E06E12393105D11446EF0F635FD086640FA0994B9E1418C2CED
082F6CA8E08AA06183FB0841C42832788A5F49679ABD6E530D67988EC6E9E4DF
9DAE80B74ECF920F608222DA34F65C6A64E28573096A1648686F2711F2ADA067
EADB9B7243558C4E7760B7423850476768866E9DFA9F6649F1964A02AF696B75
C98DC19520CCB339CEB7D579F22B8C24952EF8F4CD9BDE3445CB923F93BEBF07
575429330610A4E86DDA0A4D94FF07A76F1FE944D5BB84ECF1E7226536AA7589
6647EA6087E676DAC7827316D622066F22569A9BD942A1BCC8F258565BC9187B
8716270EAA3C59061728EFB3E1317C9CE1CA5EC9CD3B6926410CE158403B4CFB
64EB4D80157F57E05097727160EE6EA3E6E8FB3190B7E1BF4C2BD3DC8A877658
CD969A7D3CB2390AAEAD3C15E072DE0A84250C74ADBE880B8E044E4662EF0AF2
21544DE5DDC617D6C244D36FB6F2A10673088AA9391CAD3D4BAC7B34E2543ECE
021E45E6D60B1DD6F4C4423D10F8A73358BF4870481D8FA433728039209E7FDD
13ADBB921D5A11469E6953D87210584A891361BC4FFF499F25D5932F962F76D5
C95ED44B939B27616A053A193A1E999A8F17CA0C871AAB3CF16015E2B1785CC9
CE17A71C5F799840538DFC9B186642C1FA978B5AE27333307AB4271AAE398BC4
4E3BB961F09004DC142553CE10E8320786C536C7CBB691860B26161029D105F1
2820F31C2921B15AD68CAD72846FB5068313E89BA11B9A0C099393336984A049
5B5AFDFA147835FE0BCFC55CEB7BE7CA1E0D30CCA1C6F2D37438570BFC1DE4AD
B4E18F19B89CCE98E672DAADA3F704586052894C5915607E50B94848A9488C46
190453693FD84B609347C14D01307B484CC73E4DEC1A9775E63A52073EE9CB60
96D5256BE12C469311E62283A800295C586BA6F0F55B304F51C7DBEDCC111813
214BC28961BECA18026718727C25DB4595E959F4D0FA6E102390DF6D9D25468C
1E44FA0E0EADDC2F49417F1709CF6B9754F6798BA7B822DE2CB731A5C5B6658B
842F29E61024FE87B069030AC0A394EFDAB56A57C7244D3A0E87459AB789D918
4A20A7916EE0CAAF0688BDE8078A5C2F284598DCE7F588892C53EEAECB552D6D
1E675EA130BD7380271A0BED641D5D2546B25021D2717ED39AF957987F8F2CCA
4ED63495949C4A79511465CC2BD8C12054B5A29654703DE79DE0E35A76C286F2
EA67A3E13B3A472291AA800FFEC09FF6ECDE2A70CADFBAF2B8F2B50EF4BD1729
58717963AFA5FCC1C753E473E21EB8BE0A84C244DCF089676CF6AF896A75678A
B421B33A4C40A06055EEC8313272070103BD0C1A0CC262235138ECA9745E74FB
9CA02ADED464E0654164876E63E8E3BD8AE9BCE3612AC5B63E40D01916ACDA40
E27990D9B24D24CC9935A6E4D3B6A6E33D72D748E5F80F5808ECA47FE64F13EC
A61A8D261B3AF4B6C35DDA5CE78FAD9A5418281E3DD8A266D484D03C1454FC51
81D397D60EE336439DD954B3A1EE6E1C3909B75B2A5C737E99AB6834BDA21AAF
473F19A8FA248F2C2FB3CF45DA956AA2C5CA9C068EDA6E1EBB7097F4B9EC4DD7
E74C80EC2A5AE8283071C231687B609D3F4E63B64A3C30453EEA913918F7F9AB
0FD0604D39EE99D02D3FE7C02D0BF476D768D438A2C37D7771FD3ADA7DEE0A77
B08D7963706DB8ABB55A612C6161D512A8BBEF81030F8F05464D998B930B8271
6EF98026BBBE228675A553F3A56FF81A199C0540936011B0457287C7B27B9DCF
BCE1DCB7A0211BAA88951E327E86BE3330CD1A5EEED203F62B05856D5DFD6D27
6E64F5C86707D726E8CB6510CB7C057C2D55F386D8B1C75D54053884EF88586C
CB05FFC5891EEA9F0269AB1E859F477973507027EE3270D95EC7BB9535B5D438
15DCDC675CEC58EEB5D5AE5274C223DF459A74D5354A23DB779C68B730D26383
5BE9FA0240382170AB86838F1CF017F9E87057F94EC125B3ECF744CD540DDCA3
11A0ACA9380919BB7EFCF84433ECDC9821150A60A87AFE63E91469DC77BFB5CE
B75A3D6D2918EB162BBA8FCE74076177D5173F560768B3A8764F0BBCAF69C743
3BCBF6334A59D6DEDB23B6D652E67D3142790045CCE64066306B98AED8E8A2C8
9898F7DFE120A853DDC582060673605C5438B65D4106CFABC41D1F200CA767EC
7EF8F34D00DF035B7ED2E30077811C480014F59D363D13AE5C18DAD1EB75118D
4690A28A1AC09700548CB12C58D37F6D33C4FF1BA559FBABE75DFEC21C112332
EA26015383C8D43E634C5F8E12D8BE3962275478A5CC6EE68F395A1EA5B475FB
3AA771E2D664D3FBEC28C5B806FB2636FDA3EF3BE4F13A201D2BC08E3B0CE768
240F0E8CE9FF939E4B1A6365664EFB158EC0CBE445C9127E26A13D3A8E987C45
1BBA3E33D8F26CF6173CB95EE29288F1DBF9A25B6D22FDF1B67901A44E7A65D2
78EFE0C676826DBFC268474EABE83E830830CE56CA9C61CA0278D4F95DA454D0
EB829D445C0BCCE07CCF4C82B318494F42C776D9482C822BC277BE315B18312C
8BE99537C3E44E721A361BEFDCBF8DD94EFD5105EE20AE0BDDD958176C666D2C
CC80021183BAF9D8A0037037BA321C07F827B16443284B12371C3B89A5F6281F
58DD0CCB79D65CCBFD6584F48187B931B962BF2C1AC60C596F6C2C1B77BC272D
35EC5F35D5AD0743A4863053C481BB073BFCCBCF610762E2021BD7151232F1B5
55F341DE861972EB6C8B045A9C297A35B03D4A63422341AF962DF34F8987FBAD
B7A2B7A7793CB9C423D87AF303EBE1D6FF9A7C0F3777A58604F0B4ED25DA0E0D
EAE8E4754351B847466FE443AA8F754039CD0501F4EA4EAF3F3A2D95896B61DA
6D362CEF8F6B5DE59479A64C798717B80F50A4FBF21B6C0AE1A154543EA4E9EC
3FBCB69A97616164B5C0BFAF3E7184A36B9B188776916973AA2E44F86760E9FF
FD03711B7FBCED93667AA74F8D9481AA5DD8D1A1BA7FFFEE3BEF3E46AA957F5D
1988A3D8F64CA95E2C04F33EEA48ACCD58D8B69468E67AB377C6BD16D11B96EF
2A16CF64A53CCB1757BE376972FA537DF301C01B9B851BFAF13327FEC0B3B6A7
8C90C52C41628B8FC6DB6B1A94DBC963FB1BA1018BB02F3E02EAAFB0BD127AB6
2522E8E26E48E8AF62FD65FB576024A4901672F35F8F6447561593F32A2457F2
6BDFE2E421CCCAA057945BE9186686583FA8B733579DE8AAE808C8916A7A75B3
1F88489E4CDD308957A09FBD40723A05C369CFCF46E43E35EF09F568E615CE94
158D9E0A16274468E517BD56B44630B1A6BFA438FDA7772A0451CE1A1423402F
2ADE388F8E152584A7E82FFBAE30E8C9EA3ACC3053926BF4350D36D28E2E8B90
CF14F06391341B58302CCC65CB916CBB6C5996C95C98B340BCBD9DA7D0ADB4B1
9A95CC2AFE686E55D88E47257C1FEF36CA9B4F60CA8D75878FE4BC40C0ADCB09
448C46501B753DCCB18277AD919493833AC73ACA7B5E02591C70BA6DB828E48E
CA9018B12EA9801A93F1D2EA5B34A4F8923C3D6A3D02864609665BF2695A44D4
23EC819BE431DF00FB53FCFBA5AAD95814A45EC9EC39EAA8B08CB7ED83BB3904
BA7342D32F498E322416A693DC0D4302F9400975A869E402A67040708D9C7869
2F9578134CE8C457CA55E2FB61546FB7BE3DB83A2268111E4D77D5FABC24C170
2844DEAB2424766AD74E1EAD28C7E1A40508B4CE084A53CB939AB78766ED5AE5
12F997E3294EBA3621868F322F7B56AEE19C77BFA71B8A651C093330697B0E81
958D7D8343C840CD6FD8CD9CF8AEE5E9870B692CD097005D1500BF926CBB9146
855D0C72302E1EEA4F86EDB1EB6F4647F4B1AEA267B4E0A717B72CFB245BB7FE
EDE3A4F98308ED9DA3F98BAAA9353FA9BAD2A3C7CC274D0AB16E14F2D1AD0687
ADF56193C9D6D3200931203902F5C2FA9105AC777EB22730661876E7EA528DD0
0039AA5EA616287820855A6BEFC921B409B8F0162B714DD5F8DEA65550EBAE3E
24A85D002EB4359F8BF548D0B7DECC04E17A7D60FE4C40F367052F85EED07C5C
B886E0863FA16C4C753AFBE1C00F0B5F648449F215BB0F1087E692CF9E8C9DBF
5DB7B6C4A64D65590CD045665E9B2C0C88320314EA4108DE620F62B87A086EA6
8A9C8095E44491D84ABECB2CB4D3980BB269BB74BA20C256E93E9C73EDE42CEB
0362784311D07A2280C2C39BDA43495C2533AB4CB83DC8E9B4F7295E8FDFCFE9
8B5962EB26436331D908E916A3DF9F2D815CEF95947C804376DC04FDDCBBC590
AFFE71FB5133BFBD9EA6201F5EB0B5A1C4BA6E0E36BBE9B2029EB73468F50044
78ED4E340EC6C98468ACA69BD3EF1F20739BC4C5106C4527DE148B31E0F553FE
1D4EA4C0D4990CC5130EC9F6DE383C674C24816DAE80EE6C85C6EF9DE8207FFD
ABC084BCA859D1D019C9F141E2AECDB17CA579905E8E87443D6FE069758A841C
F810923C07007FDCC189CE7A7A9F4F754F5CEA13447EDC9986F81025330F7060
04F6382E66575705EC8B258E3DD68670B0A9FDD259FA8D47719139896B9AD51B
3407F6082C6BDD1991E2337BB5A98E6BA42A59D6D740F506D0EA054681D81FC3
6ADE7274244A6831368E65396773B20567CF3F09D11A879A1D9EA992B3FB7999
1E6500B79EF1ABABB5EA4F9031F861445EB8E445EFDE8E06B60C652116A3472C
E2059E675557E53A7F82EE005226E4B84A90398240DF656D5E8EA1872BC169F9
2A890678717A396E56294C4ADFC4F456421C21CE57C3B6D1E211CD27504594EF
9D879BB2E5DF7188DC7DDF4D7C827324A811CCAC6C165A39EB148B25F23459D2
996A7896CB23F4854D622C39534F12614E0DF155D72F1EB2508279648459F40F
411EE46E679F57A19EB61F1CA27ECB4E79111FEB853071B8B14A6550AA382A75
AD0CF739EF1B49B6D270D8E14AED4F06B3F1FB4AB16280601D4308FB33E41B36
DE3E0CC49BE3BA370215A15953B841058296B4C5F6BC5827A262D846549BAEB5
3987787AC9AF72F866C705DCD6EF3F82449781640696B74F41C7D5E32C525FAD
B35C5D0754B270FA7C180D3CE759114D5D58C58CADC13E651699700B83CEBE19
EAED24C1F98F12A9E59DF18FF3B6E16BEAB2EF6A77F16BBB6E90FDD676A2215F
F11B396886AE482F58808AA83A8A330F84DEF708A7F73C5BEFB275FB4A435B05
827CE32E0D7A3E54F783FE3E4B37B4BBF89EB9096FC4300D038C9F0C47B7DD6F
3FAE90FF254A6B4671E42BF7C669EB92D9D974D5E29D6F1DE7D8DDFB5C0B8061
D01D7B4EF7591BAD099A304C517706142112BB8C77B745BA938CFCF6FBB94226
5142A0B331C5BF1154E30F4820FFF6B4459114BE5D36359D0AAF3733792A7D77
A990393CA5CB36D53476E9A7041D02CE5566A4F310FB727772D6EE2A9985DD3A
9C215D9836ABD896C2C25F9F3AB02111EEC635E7513B25CE1A949DA3436F5C8D
95A2206B6FA4121E1ED7FC481932768966080E03ADD276011F6304766250851C
32882EB089FCFD990D7DB2172E7B0C9282969FAD7469C7629574F2B87FD09C9D
16439C8A143BBDD6C2106E92B1E00F77A025329DE49E5E39CF824BE6E3FEDA24
82C8155723A7946A940BDB548BA041DF7AB94BB60197FBB232487E2B7A1964B9
30669F8630FB557061F744CD86ED831BA5218D0D85CE6D63B74BD1872322D07C
1F80D95C0A650BE104E5D5B9A905289C7C092FAEE57672278438476CFA78E3C8
479FCBB0A6BF3DA66CDC3F919ABA70ABE8E9BC8CB315C26907450E10CFC01F91
2D0BCBE3007FA74F5B8486824392BB99939C5C5317C16BAB73992439E2131906
C3032C49AD0849CCA1A2DB1731F1F1240F7E1D7FDD3A3ABEF1809376BD502795
706F70009E66DB10AE8CBB50A5EF4D6EF7FE3863FA3C11E8ADA0A59D5DDCA106
FA0636B029015BAF7A3E6528F3FB193C8405D46788D2641284C30FB447D88AD0
83E261188DFDC6E45853F882F6C081359880D3F0CC79D1600ACAE3ABF14E873D
5044CD9F34D07AED686EB5175BDC46008D953CD802D0D2EE4608A524C4F1A641
735601161669B687EB8F76BC3B2D8BD8AF3E5EB9BC7BE18F5EB7A440C673D625
1516C3B30A16A417C37827D8AD7B50929C1F327B4D933326D9CA6B2B1E24B804
A721B6B0C7DBE12A9B6EE78C78277AB7939BC17764A81AF067B6B849D726CC0A
8D7B9EC592F01F97698658F1F29779B8AA3FF0170ED2AE9806196A8D4EB8AE01
548A40A719DD9E93F5595FA06EFC0ECF06F55F30AFADFBC04A0128506276EC96
D90645828117987E2FE36BDC7C5B9E948D2465BCBC7848429CC783556ECCD0D6
AB047968792B2DAD9CEAC584AA741728166A71C4B70E9F4AFFDAE5D2205E9E81
B400D73C51D6645BF1F1342D749969BF5909107EEEE572D4351C21D82411EEFF
938985A2DF22F45108CC42EC064C21AA3136213A5E8350B8F483C8FE9126C97D
37F2DD6D4E50A9FA8A70BF27E3917F1662B594D494E8F6285CC25AC742E876D1
91FC8C84193F72B5357E8BDC6EBE8B44CC71133263F3BEBAFA0317443678A4B3
06950873DA9F45D3F121C211E841D87FF88E1FE9F8FA4A2563F6FDECA17A72DE
DC4999C6EB026B891F549461E6F42FFD0636EA28FCDFFC6B0A776B2DAC0055F5
322AAC693D7BE494B28209E60894E4FF0CA93FD026661CCBBC71F21CEF3F4687
F0F16FE40CDB74FDD60A3914204D66ECE98980D3B73EA4E5442AFFC560BD5B07
B67E282CE6E2E23E6AA6B6883EC4A3148FC12DA48B8FBA9A7A12B6566EF5E7BB
0DBACFD77D7D47646CC7316D9E007400C83E8247AD37183A7CB621E55B3D4B02
B5E691318DE3D437EC4F152240EE87F0D184FFA332B3D433EC955BEB9DCC214E
61E8D1E091AEEF1864ADC733AE203D9E3A4233BF90478DF1B3289B974267D587
7B6EEE93826212958A21EC955C2532B1A884523A0634F67D863035BA50D96331
C25A10BAE939C2E533478ECE6CEB9EB617E84346D06DEBCEACE5CBEB2D33DFC2
199EBBC2525AD8FB3D5A5C52B58A549D32519C5D971B1E202EFB2FA1DBA5FBA7
F483C8254DC56F63345A4254A99FFA1341F62874EBD426E37B2AB27C4837BF23
64382116A593A4C9A262EACD4755EA5AA2F4F8F43FA034AAF603EA3ECA39430C
54201577CDBF8AA7BB7B6E782DC1D9D7FF525A5B756EFC36B098BB9CE107C713
A3CCE573BB3E9179755E4E02F77721A962276736E3F8176D04F34ED91CE5AB48
A4628EC395CA24003C48BCCC6580590696D0C5E1CE02BAA5D7697B56E13E9D2B
5804CDC06828FA7AEF0461585B9CB71DB8C2EF7D50C3A6F64CCB74A880CC9481
D2EC3BE56141D567EA672EED3967AD915239959DDA7D5B35110900C8049E0908
B4490143379CDA930ED973405154310F9494D09C4428C4A97154BA15C8C6E304
4DB0186C27AB388801227C6581BA9D4519C7BEA96F5C717733F1AA43E6A226AA
FA11C92651887D12DDAD7EE3D8AC6573B6394AAB0EE53A62257952EEDBCA1015
4D8AD5FCF7D39DB285D7EE1A4EC5D8A794F62C8E955CDB8AC8BC34C602D0F73A
09CEA9A720EB1A8750DF7E7961AC02510F5B6EE04E45B561EA48F6D3E2519E9D
23ED670D2DA2EEA548BC14ECCEF072BCD93FE9678ACA19ABFFCD5B59A380CC40
84CF47BACA01677AC0FAC15DEC2AEA8C1983A8C4C22383FC85A2D2AB8349E4BA
0CD7D2227F5AF37342FBE82560FB682B0123148E53D80ED2FED6DF3ABA95F03F
294DD65072121C50FAAFEDA11DFBF8597E4A1B5945314D2750912C86AAED6A89
6FC01D44DA255856650154305F77223F7846B005A75998EEB2C4C2749E2C2F06
83E01EC150F276290101ACEB68DB04B6C319DEDE2EC73DE49F4013A0DC7E2E93
76BB63E1DAD97B91661E126FDBABA78FC1DF2E6FF27F4D96483C3B8DDE1813A8
4E326E34C67DE72985041253E765F7C154FC5623575161086BC2003AC0A9698A
E84CB97A007941D39239CFA195CE54BBFE9F13E4F119193F62F6A5D4D432625A
2D058F575C72F4A10CAD629B8CDB3D9A8A4C0E2F008129872A0333D548B04565
6A2C8760B3731E8249A33A6E064AC1250B4C879999B04BF7CFC2FC59C1894D17
7FBBF1DA7D23111F9CE050A46D17DA14ACDF0B0E4A2B52FA3C6894F1A737A404
259423E05CBDC18F3F41DFE2688F464727BE1CDF9FF5239C62338F7EB88C39A4
3DDE5BB0252BEB0EF9D8235977B315C6B061EF8D3209A230B2578118918F97C7
BB8B62E532972120E7BE8D9EB779D89DC565746F129EEAC3CDF33EC8821B5021
1057E26816643192F6AB4C4265A5C2599F55E134AE80D6AE3616B670F709947E
40893C2CF5209810E034DCF50AC7F81248FDE0B428EB05FDD26BEEDF3943D11F
396CFB5E889D35D6CA2122C046C743CE879EBFE2E5DC3909F755EF678A9F1382
9F5C336597F0A2025CD5AD78D0CE98AD49598230971DAF473A5C5536CCD95377
E0D3F732430C8120A5EAEE73D6E82CE7F46C03DDBEED7FD8F439F613B2BB7E47
EA7CF33DB12B22A894F8745D10026F1EF060F4C7F19A7195E992B3C0533C07A2
1CC042E621E1A37F13C35538CE86CD9BB2321C5698B48F381A17E01AB7E7C62A
41BD6A201AB2E6F518890CFC9820CCC2FECCEEBF9CEE703F7B55B6097E73D5DB
931387D9BAD3D4E655B34A28DE4283D9697D0AB7A8DFCE36165402863E27C157
421178B7EF6BC0C83D10B4E4D09AA0D1E9EE8B39A5D38852EA30A8EE16315D4F
DF3D2B521CEDA9446FDBF1FDBCD7E3D0134F6C1FC75839D5376E904B45150CC8
927B81AC5FB44A99443CB300C7AE4D79842DC6271A14002280832B845586E3E2
EC973F74E00D5AD68EEE1DCC32186DD025D5DB577ED40D52EAC8F293D6D3972C
D5A3EF231F391BCC55F4DF0870E56F9FC8866B0F82F15F0B60C27CE7D105A169
AC09970017B8848EBFC37175FB18AF824FDEC3C2251EB47AA437B472A4F411DB
200E5ACCE752D0B9E2669384F037BFCEB36B80B8768FA0C1DAB8CF9E644D798C
B6B183E3C10CE11EAAEF764D44EA0ED754340EE65FE5D19760E691B5D57B17CF
BF36280733621D491B0006E44A86218B56D8EDCA7ADD440A3D913CF7A99C4BAE
08BF9BC1368A3D04AB2B516787BD43412C1F57BD6EDAB700E5EEFCFBD862CFDB
F043C333C255DF28F5447BA7DB0BD881C8BEF92E51EE333412A615E22335DB83
FA4567E63CC03ED3A5C1D81B3FE5493B0F64F6946FD88AAA65E3395A602CC383
B6457D12F88119EE48845036C47B54168448233E9FCBD2911ABF6513741747C1
0DE60A539D5323EAA07F96AF57E4F9F563CC23C2345020E62FABFE080163A73F
6EA328E4E19323D3E08FB213D099CEA6A68F6706E2F3FE086FE526AB9157BBA1
DA686C5995F8FF19A621093CD5361683A63E4E29B04E27F821A41B171AED7569
64090C37637E8B8E381D5C3DB93230D523857F015CE51013FEF78FCF9E6E3E34
57E57921680D36CCAFB0840FE2348A656A9A27FAD9957FD784DF02E11C62EEF0
FF159CAE0686442FBC0C33FCCC8E012834C96CE631EC7E3D0041BD9C034A39BC
3AC964B5A7A98504FAEF26A20667EAC6FE5FF0293FE27E698D4B6A9BEC11923D
D81F6F56B4F825D481F00F5B89D1D8699BF4CC2B737C0219CCBA51B9B6CD2AB5
F7A8CEBB53646309043E6C6E006D8232BAEEF6F286E04ABE3DAFC850381BA3F2
89BAA5BCB53F579E4FC75022D798039459440113E7DDAB63F45845781CA70A44
40EF87BD15FCB88CDA3B83CD904E7A2244AAEC916389F5F91A9EDF009C366E28
1A30E78D773151E02AFD5776BC723C4641AC23FBCB748695B8D3426889C5F930
2A6635BDA88723578AF0582A1AC8815382312A5DABA6A68EF697BE9586ED3BC9
5EF13FC0EC7D6538A19C06BFD975594CEB22BEE3D1419E38247A63C2A6CACB4F
3C90BFB9F256656DD8921B2A1DBE1043FCF1A2122E052E216CF3CCCB52AE146D
2907F0A3DC007BE0D28AF73CF0CFB382B9E5160233E5132B691A872A211C0A46
165FBE6540655705FA6733E02D1B0E7D6F27840D276A73E387FBE6BE18EA06C3
D620E42B1456B5DD466416026AD541105C990E7BD62AFA5AEE7CD4E1A9262B90
886F90C1F5AFE3453AC2159231A734E0DA71D42FF8B6BFBD156D5907A909A5F7
794AAC7BA42ECAD1136B8745DF47071DF61EB08039E880B3DF26AF234187152D
67DDDDBF1AE6FAB88C8A022940E413E5980F8464A4823A7024CAF5A1180EE62D
F0CEEDB38B96A2E3788EC3DF60FED1331E0E269AFDF1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 94371840 58982400 2000 600 600 (00-1.dvi)
@start /Fa 134[297 3[338 215 256 3[277 338 2[328 1[174
338 2[277 3[308 12[369 2[430 42[451 38[{ TeXBase1Encoding ReEncodeFont }
14 553.286 /CenturySchL-Roma rf /Fb 138[152 95 111 115
1[148 136 152 1[78 2[82 3[128 148 124 1[136 23[99 4[185
173 67[{ TeXBase1Encoding ReEncodeFont }16 222.364 /CenturySchL-Bold
rf /Fc 139[72 1[82 2[93 9[93 1[82 103 18[144 21[103 1[103
4[103 103 103 3[52 44[{ TeXBase1Encoding ReEncodeFont }13
185.304 /CenturySchL-Roma rf /Fd 106[135 27[119 1[173
119 136 86 103 99 1[128 111 136 198 70 132 1[70 136 119
74 111 128 99 124 124 3[74 1[74 2[157 2[181 148 1[161
1[148 173 181 1[148 2[91 185 173 148 1[173 161 161 4[135
2[62 4[124 124 1[124 124 124 1[62 74 62 41[136 2[{
 TeXBase1Encoding ReEncodeFont }51 222.364 /CenturySchL-Roma
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 600 368 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with powerdot class)/Author ()/Keywords () /DOCINFO pdfmark
end
 600 368 a 600 368 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 600
368 a 0 TeXcolorgray Black 0 TeXcolorgray -600 6640 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def

-600 6640 a -600 6640 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 6640 a -600 6640 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600
6640 a -600 6640 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 6640 a -600 6640 a
SDict begin [/PageMode /FullScreen/Page 2/View [/Fit] /DOCVIEW pdfmark
end
 -600 6640
a -600 6640 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -600 6640 a -600 6640 a
SDict begin H.S end
 -600 6640 a -600
6640 a
SDict begin 17 H.A end
 -600 6640 a -600 6640 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 6640 a -600 6640
a
tx@Dict begin tx@ovlDict begin InitOL /TheOL (0) def end end
 -600 6640 a -600 6640 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 -600 6640 a -600 6640 a
SDict begin H.S end
 -600
6640 a -600 6640 a
SDict begin 17 H.A end
 -600 6640 a -600 6640 a
SDict begin [/View [/XYZ H.V]/Dest (pauseslide) cvn /DEST pdfmark end
 -600 6640
a 232 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0  setgray   0. true 0.0 0.0 720.0 450.0
.5 Frame  gsave 0  setgray  1. .setopacityalpha  fill  grestore end
 
@endspecial 0 TeXcolorgray
-600 6872 a
tx@Dict begin { 360.0 225.0 } PutCoor PutBegin  end
 -600 6872 a -5730 11686 a
SDict begin H.S end
 -5730 11686 a 0
TeXcolorgray -999 6952 a Fd(GoBac)n(k)p -5730 2065 10260
7 v -5730 11682 7 9621 v 4523 11682 V -5730 11685 10260
7 v 0 TeXcolorgray 4530 2058 a
SDict begin H.R end
 4530 2058 a 4530 6952
a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 4530 6952 a -600 6872 a
tx@Dict begin  PutEnd  end
 -600 6872 a 0 TeXcolorgray
-600 6872 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -600 6872 a -600 6872 a
SDict begin H.S end
 -600 6872 a -600
6872 a
SDict begin 17 H.A end
 -600 6872 a -600 6872 a
SDict begin [/View [/XYZ H.V]/Dest (slide.0) cvn /DEST pdfmark end
 -600 6872 a -415 6872
a
SDict begin [/Count 0/Dest (slide.1) cvn/View [/XYZ null null null]/Title
(Introduction) /OUT pdfmark end
 -415 6872 a -353 6872 a
SDict begin [/Count 0/Dest (slide.1) cvn/View [/XYZ null null null]/Title
(Data Description) /OUT pdfmark end
 -353 6872 a -291 6872 a
SDict begin [/Count 0/Dest (slide.1) cvn/View [/XYZ null null null]/Title
(Conclusion) /OUT pdfmark end
 -291
6872 a -600 7154 a Fd([,toc=,bm=,trans=Replace)l(,method=normal]FLIP)58
b(00)j(mid-term)h(Presentation)-290 7881 y(XiaoXic)n(hang)-600
8164 y(HuNan)g(University)-600 8734 y Fc(October)52 b(27,)f(2019)-600
9268 y Fd([toc=,bm=]Outline)1341 9271 y
SDict begin H.S end
 1341 9271 a 0
TeXcolorgray -3 x Fb(Introduction)p 0 TeXcolorgray 2828
9108 a
SDict begin H.R end
 2828 9108 a 2828 9268 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (slide.1) cvn H.B /ANN pdfmark end
 2828 9268 a -600 9681
a
SDict begin H.S end
 -600 9681 a 0 TeXcolorgray -47 x Fb(Data)64 b(Description)p
0 TeXcolorgray 1374 9473 a
SDict begin H.R end
 1374 9473 a 1374 9634 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (slide.1) cvn H.B /ANN pdfmark end
 1374
9634 a -600 10002 a
SDict begin H.S end
 -600 10002 a 0 TeXcolorgray -3 x
Fb(Conclusion)p 0 TeXcolorgray 697 9839 a
SDict begin H.R end
 697 9839 a
697 9999 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (slide.1) cvn H.B /ANN pdfmark end
 697 9999 a -600 10281 a Fd([,bm=,toc=]Introduction)-600
10563 y(Problem)e(Description)-600 10610 y
tx@Dict begin tx@ovlDict begin (1) BOL end end
 -600 10610
a 0 TeXcolorgray -600 10610 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 -600 10610 a 0 TeXcolorgray
-403 11045 a Fd(\225)p 0 TeXcolorgray 83 w(searc)n(hing)g(the)g
(relation)g(from)g(different)g(varieties)p 0 TeXcolorgray
-600 11526 a([,bm=,toc=]Data)f(Description)-600 11809
y(Data)h(Description)-185 12191 y(=)p 0 TeXcolorgray
-50 12191 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 -50 12191 a Fd(there)g(are)g(15)f(attributes)-6
b(,inc)n(luding)62 b(1)g(c)n(lass)f(attribute)i(and)d(14)i(feature)g
(attributes)g(=)p 0 TeXcolorgray 7877 12191 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 7877 12191
a Fd(the)g(part)f(description)h(of)g(the)g(data)f(is)h(shown)g(in)f
(the)i(following)f(\002gure)g(.)p 0 TeXcolorgray 0 TeXcolorgray
-600 12672 a(The)g(part)g(description)f(of)h(the)g(data)-600
13381 y(=)p 0 TeXcolorgray -465 13381 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 -465 13381 a
62 w @beginspecial 0 @llx 0 @lly 72 @urx 72 @ury 288
@rwi @setspecial @endspecial 0 TeXcolorgray 9253 13829
a Fd(F)n(igure)g(1:)10258 13829 y
SDict begin H.S end
 10258 13829 a 10258
13829 a
SDict begin H.R end
 10258 13829 a 10258 13829 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1) cvn /DEST pdfmark end
 10258 13829 a Fd(the)g(part)g
(description)f(of)h(the)g(data)p 0 TeXcolorgray 0 TeXcolorgray
11137 14112 a(\225)p 0 TeXcolorgray 0 TeXcolorgray -135
w(\225)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 600 368 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 600 368
a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -600 6872
a Fd(The)62 b(part)g(description)f(of)h(the)g(data)-600
10414 y(=)p 0 TeXcolorgray -465 10414 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 -465 10414 a
62 w @beginspecial 0 @llx 0 @lly 1000 @urx 497 @ury 4000
@rwi @setspecial
%%BeginDocument: o.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Pages: 1
%%BoundingBox: 0 0 1000 497
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%EndComments
%%Page: 1 1
save 9 dict begin
{/T currentfile/ASCII85Decode filter def[/Indexed/DeviceRGB 241 T 726 string readstring pop]setcolorspace
/F T/LZWDecode filter def
<</ImageType 1/Width 1000/Height 497/BitsPerComponent
8/ImageMatrix[1 0 0 -1 0 497]/Decode
[0 255]/DataSource F>> image
 F closefile T closefile}
%%BeginData:;

exec
!!!!"!<E6'!WrN,"9\i2"U,)7"pYA<#RC\B#mgqG$4@4L$k*OR%1NdW%M''\&.fBb&J5Wg&ebol'GM
5r'bqK"()Ic'(`4)-)&X>2)B0V7*#oq=*??/>WZE3&+!2RHGI/J8+<_mO+sJ3U,9nHZ,UF`_-RU8i-
n$Mn.4Qes/1`>(/M/S-/h\k20JG180ekF=1,C^B1c.$H2)R9M2E*QR3&ilX3B9,]3]fDb4?P_h4Zu"
o5<qJ!5s[e'6:+%,6UX=177BX77Rfm<7n?0A8P)KG8kM`L92&#Q9he>W:/4S\:Jaka;,L1g;GpFl;c
H^q<E3%"<`W=)=BSd0>$>*6>?b?;>[:W@?=$rF?XI2K?t*SS@q0"ZA7T7_AS,OdB4kjjBP;*oBkhBt
Ci!p)D/F0.DJsH3E,]c9EH-#>EccDFF`hhMG'8(RGBe@WH?smaH[C-fI!pEkIt)ruJ:N3%JV&K*KS5
#4KnY89L51P>LkpkDM2@+IMMmCNN/W^TNK&sYNfT6^OH>QdOcblmPa.N!QBmi'Q^=,.R@9S5S"#n;S
=H.@SXuFET:_aKTV/!PTq\9UUSFT[Unji`V5C,eVl-GlWMuntWiN2$XK8M*Xf\e1YHY78Z*CR>ZEgg
CZa@*H[C*EN[^NZS\%&rX\[f8^]"5Mc]=beh]tM+n^:q@s^VIY#_83t)_SX4._o0L3`Pog9`l?'>a2
l?CaiVZIb0%oNbKS2Sc-=MYcHab^cd:%cdF$@idaHUne'umse^`4$f%/I)f@\a.g=k98gY:N=gtgfB
hVR,Hhr!AMi8NYRio8tXj5]4]jQ5Lbk2tghkND'mkiq?rlK[[#lg*p(m-X3-mdBN3n*fc8nF?&=o()
ACoCMVHo_%nMp@e4Sp\4IXq"aa]qYL'cqtp<hr;HTmrr2oss8RU3?r/g.((CM%6=E^#A2YG=LdY]L3
2BS,(Q:gn;7P\14WfbVA5YE5Q;&`k8nCo2A@>bsQqV*j3Mb5C2k3WU;n:u_I6XB$BN.#=(6(h[;JB+
AAN$)TW)RM33i,lZ=0,G<<P%:8]jJ!GCfWVDQHa'L>&@<PA[^E5\6NoQ4/LNqGJ%7#=1dSfrI;UjE*
,4L(Cc/<@W>M_AiC`kaCK<o4Jl13Qcs&_=hNm@4eL)7FBUgSQVFC-C3<^nB")'LfPG_84f6hJ\(kkF
>J91nID=]ZG[*E[(QHJrEd:p(B/cC-k]D,V5,VJafBd[-?,#KG^#/=(HsT#bQd+^cH@9,7B=H^cpj@
Nt5H!-#p\]Ji?bbdur;XPD$j?[IO=UhC_%99T"i6::*='FmN$SeIOK:#A_[t$L%E":o4V,IC$q1cHO
Xs3?`=YdD'uc;O>o1KmN+EmHOfWC=`t?O<*QO</I36NC%##kGOt;S;aV%:4-*cO@3X(=/M;i"LJ:QL
$+@VYq$';)'4qE8kgmKn:`c*tH)IiJhFTb&TS0X81M7<d$7UTb/b$ZqH@YDa+aZmcjpo&`Z^r\tMSE
G``*M+N9;(NDjal516a:StEckO]-A--?L`%)4JaH1ro!/]\g%*0$b'cnOo!eD.F*Aq!=,9Qsd"D6TI
1SA-L^aP:8&^1J$+d"m<(u]KDFW>R=_IoB>D5Ct#QE@9)gD8&AD;1BD]l2[B%E3>BQS$I'h%rf9Fkr
C$h07]lNTGHBQ`]+a)Q.q(>m!OSauT`ZLt[E4L9R[GTLWr,G_X0]"D7kY0_&B,R'&$!iu$'!NT6Do4
ceYA%RlN@R4_3tjV^Yj!.dDnOB==\&IF.XiK2]64s:Mp7,j>2ZsGI)NCMrjf^qJ0nW?B'P$'W5;(7c
&jc\;=^0raa9?i4U'>PlD/P*_F_^X;-i<;>7knt-?=!i&Ll&@q1<gcga<9f`P[9g+@X]FbQg@]p2@B
ir$Q<Q5<d:p!lm?ZLL^>X(B>jdp?Vuajn]jC/og\(RI-8ZKK:,"^?9d48&*Q]KFM.@uYS]ii7Tb:>b
!''I.h"H4`U![QGRU%hD;5r)\opX][^K6lLCc7bg;K*8'9b7Ep^oCPsA0nlmTS8<2P\><G_2O.'aU+
B[mCJip[pQDnm<8AthY2M(ZLE,9Ns!IN$8Go#<'ZPL9ogJeJO4qme;35k#RjuZ/Xsi^5VNlW!^NtH%
g50O'GC[.B!FgC,_g#*s.1P\;KX:)>T4/?Yk1-k6noBFeO+=%:=mG36rt-mZ#j=i7P-/k)+L\!BcBP
se9;s(Z1GLG8+I9a+NSR[O!I:P</2[>ER^I*8huX/.S?lITdrR;`3V'hZLkmc-?@nZ&57-jcSS?P</
i\.E(&G>:,A-t3^Js_lMs]O`:lGkZh)&uch"OH5u=pG%n&5FeIq/pFCcOb;DY-i8N#"o.nikue>5ge
D*9sV<&GC\(fV4p5uUbU<EE3deP06ed$9;t>#qk-AQq&M`H,?e[I^M%fBI.)@9BrqNg/1^6;;#oG'0
E^fsZU2BNhjP8SVDZc*)"h[#MP*>Sd"QE_k:%NH<ma<S'+a2AP%k?8n+ZGZWM!kBpVl:%)CqQdu+d8
bLpAP2Fn=%tm@G2/@p)3-HB0_RP=>Lgmm$o7>j[VD!s>Y0Jt,j;@S\P#BrX&WpV7<`[X[2-+"KAiZ,
dM.-47B:NT`G&L7@RFZk\,^K&MU$+NqB;3k$:628_\m7+il+306W7&8[VlXB24`X.;UnMB7Jn-?#:P
7TI2Na+eYXV_^>2HTqDCLmT.\12^mV7?-fGm$lJWXDdR(tF!@YDa(i`1O5)/p1Wch?JAE\eKg?B:j!
%MTrhM+5>k@PU>>%]>,Q1*f4q+ij.Z='&r'Q-%G^)C"[pOW+<uiZF72&TT-<+V?bt'7HTIV5]BeCY!
bnQK]r`6>>F-O@^&.#9G%N4HUK>ET.9@W=_qhUnbd7j=gTFch)WM=4d.o^N\T1IQpo!qG+b8X;[?OL
oNk=7rSSP+P9R)+e3",Yf%eR]Z7ZOU@HJAnq%EB#sgN(rEupNId'[@JJ$Ns8bkY#AJCo(OA[UN&>BI
`UsMCu=USYZo7HJN1dRA'+%"X)0ucK#)+,re!n_lG6/XIaUH].G1e3-/asAAOBU")3P9`X4j.)=!F&
%#.'S'k5NNbAj+sEP7&V`#-#aZE,bY:[HTE>Us7XWO]pDt^CrL_Kq'u3oZ#nC\#^/FtJj7Hc=dKM,?
KWKjRWY\#JN*M8!hV4gaIZO%h(W\$RP[ktl>#Ise5tNRS=50lbnn(V=2ruE`1/*o?l;:/F=TrA!Y=F
a]5t\[l/RLoMQO)_V-i%I.V6%4p#f^/QBi7X$oZ*=T,qVejnLnK:UmY.MKhTJK1T#PhRT!c/bV]2SV
S&'FF+.07W+@n$jPHD(qJa`J7l_`Ok"g&mG";]-4QaTMK%%Ou:FYZCVd01]oAY/B7HH`^">-8<*\gJ
=lTUrK"=;PIF\c0e6Khq%Tup,d'&"j)M4GZYP[2j;Pik?3"JqiWSk7?[7n2*9-DaMPK[Uf!9-%:`:/
o*!50@M5i/KXloXT*CWdOYWm6uI]!S(,)0i3^,8:kt*W'9L2o'18VW0K]K<B>D*>_PjGeRkUW]"&\.
o5Lc=[]>RKb=X2]D134j\Q4sF=K3r`XoO3e2]CnKCUH@0'uIZ8MUo8;rB%5@[_]A?q[Dg?-Ef8KPh?
l)@bSe\9_KNr=IREER[og>Q>2f?b.2/RQ(Wu"4HeAh?!H]-B!feee0YPl9!'C<[Oj8fV>G%"mCc]4/
K3HAl[)/SrF<>qb1/(jMaqYJGI]:,iMG:u7;dO(\h*jFY=k0Pm<t8*GCI52Q?@B24l%AbMPFJs^NhI
akYe+qiOBG4"9X$tC^l6,2J1>QbjF\]pTiE-k&Yg1+N=GW3-^IV6l?2J8W!Ui^,P3Ti1)$H^W$KY5'
sJB0I'-&$:&h<T^N3&M!$d+m!-'r2!5+%SobI"4i$tSLMYeL]i]a(8G.!JJ5DFD_lu88dGd7gM",Y+
e_@^&GEE1V`>ihVd,DUWN\;.L[@$7'iY<:j5c?=H@/q8Oi6Fm/T\t,L:$TE9ZM*/hjMmPh)d5A+HZI
Z9a,8A>!27+h7qa=Q!ORu?_6!YYoDjD<&B)B)NI3LYF10cR!U"fDQP;u=#R$)9J:_r8M<l<*,m^4Z@
H(0=bN?gT@`iGd,Gd6"GufN%*"jrC,4o#r0sE4MR56<T9YREc\u/,2SVO6<Fi;_N+E)f#)DsoR#8sE
:i1)d&EXksj3QFKp8I^A.[coKnq]>$=Pn5R!cj9haM"VnMi-^TZp-/fGrb\t<\99L,hY$&ODDD4PGe
i7!=>V'2$&(_)OP"Y=+VBQ!ifI3HNO]4)WF/Ol,,NfuEI]:==C?k\.@!NeP1ark@540BjO6,rhJkQB
7;#QPo_rPOThss;=u@@`8Yo>LPhL7DOX$%=.[=2F?B\9acmtC7[+;p!YtCp[4#M>hBsh.3QJ6PriG5
Q#DO4S76K_"JhWP^_jo072^gQ;+Ho<&YM8`rl2k4JE+\g!TE1'j_q^n5#i3QRfNdj?gd:i'U9dZK0$
H^^P]%k<7/"G7#2*5*Phf6'SmWY&#h&C!pfC3_U/g^+9alRR=Q#6O[Tk`c<3;ZH0<mB7_=LpZPpOC!
_l1fXjIiSp+`U.te^;"7RbOPCUoH&L[hAu=aHfs0Kijes%l-&Su5d3&?dm3D#)Z:kA'=e+ZlMMY/4g
80E$puG5)\"uMi["rKd%j"#_D*6A%`L/%<=d&e"BpULnLRBP-'>!<Z:30jG5OfAj-q,6dDC#*88Pq/
,:7F^P*X/ZF;H(AmHgR2ac]VA,>/XhQRbQ]PeQudP65YV+]@V6/OpIJCG&<>%*(=iZRk+a:2!&O,KU
V9Jr.ffgt*E=PS:Yj:i-(;K29p4!>EkC,hk-%e<?.c;J]VgJl,CQ*>$\]XW]=FeIujp<,=EaGgfUPq
c,FneMU/qeMUu#_)8!O<)p>K?U[o?Q").Ap(JZM=DN&#>tt"a+(`5g"I!>!/5;%:5mj)1AD-OuGs>M
2h5bKIQDMI]<m"F+AQtASRfD-k<QTJ;QQ>(`fbN&n2I08#nNbrtouh..m"Oh-hir!N2dk-a"bnd62B
'SCPu\Vpi=q:(raH_mUPIlG7O;/H%t6q?@[-jTPU+kP;P@V9mR[!4%c0oejdEFENoo^]!i+QhV4!6@
3Kp_=BW,6=ULtJ)JSaOfY+4P8p3)Y"+IYd"O_6^dn#/47l[u0B]#L_MltB."DX6\]eC\RscHW,#]7L
L!?$g'eT[m>Z41XReQMQ1#\)-i)D`/+3iG][Cs1iSU:Ct]i%?De#EEQ'T^@Bjj%;9gKh`YoKfgdd-o
3)qrGL`/F;1/"<pIVl:gXfSWoiNjq_=cV*[D34O#C[;W-89*=%Hi<I=bRud$A&rLpbGS03a.H6G74_
Xolc]eFcCPZ\8kOg-OIk:"@F?&,a)es\-EO6?t<C75VXBjKZ7>ZhE%*D[>">,S(K_3EULT-i&a2;jW
K/2#``oa0YuE3&E'8BMD2=u6Wcf#@N[_HLSk'A>Q/.eJX=-k.fbrPhH"+h"p.U4&VcZu#m:Z]!>4<-
K/!HI!2t-pnH(tpbV:6XW,]a1WrW_uqh.\@,e%GXal,#aKaO2@K5l2o!a%r%_46)X6,41&&Ha#g3-^
'!4@$nG/g0-3ho</e:u89JB!Er(`s.).fG%1`j%'1T^tM'Si7870,_;!6#WtDWU`a/,'+fDB&L'#KA
8hO^aWf%V)(]rkniaOD+93Mcd0'L1E&*2X"unkEnHe,BJW(^Q#7B6W6k[<Qb:.'/jMLGJ$A^TsdKV4
P&?(_$`+X[Pga%Ih!u=.lG_^7T5fB<`Q,PL;a!Vrd*8K+eo%mVCVQ(qn0XMSqUb@bT.OBk+A-lbaDL
d:I4$lbWJY4]-%U`fj-Ad&7KKa+4)>??Cbh?5uj\Z7:+9t81jrP_&"G'r-0ut2i!2*."%AF%H^b?<(
,GKOfH2^0Dm/!KV<a/B(_*F:u(F(1:NKl7_88-`0UiP#?c%fq+*'GQPPaT9\b&$6NUJn(nI\=7jECj
m+7A].POH@%;OK)JrWV%E3;l4['WP(ZA1<,^0$Fa!"V,V(">+\fM>?7_oA9PA+@o`gN;<RUXUX_bbe
CpHu.ofNMe_R9-R^lSe1]OQfDSX$@oW@Fh/?DhY^VUp+#j`NWYdJqo=0!!3/8RqanM8/'lQWFs4.!6
q`k,3mjJ$KCVR1Mh3a))93s9or%7-Y'QRbEoX7^D>p%H1(\Dq=h*NVUo>T41bWY!#i7CJ>e,MJ:o>q
NIrZSBb_=,W<_J9]B\J2hNX:`".`IEYI[SP7lja*95*;Rd!C%#]+3%*+16"'9e_?:"m<XX3,;(?Y4e
/(0.T(^'i5=C?]!nU.7Rp`R'"W*kP,I]qIF^SkOON?R:=Kkg1e\).Eo/2r<dKt,%q51SV\V.FDdd@.
S>CZ;>"Lp,qd>,/;cK4$Mj_5PYpe8kh$>NpaD?6.#,57!pd_@2*:%2o8C+_-sLO>6_XY.6UUhb8WWE
Z,8d"$h*^!N%\=Ak]1+m8W-$WK4?b43Hb,(5Z;)1rXDcbRF5$k"Na^ZT9_`-l>qaE,ku2TGSE3`NA5
P_iF>rF39p,$g3`_1W/-_&(t_a4\Y%4['#)08>ep"6%U22et:Ff:(M&so9:rkVUY;q9\t_9[",)>$e
iX'l6tJbogU"Q=G'lD[""t!^ePST_\6'U=\X%hNnCaH?6nocID_-I"!EY=!^17<od1!jRpQBcI@$h=
C=*+b0Nmg,a0fHa0p7<(T=-?&g\1'ZgZo\3Kn3>X2mB[EgSD+BG%\EtNrG4=^L$@DL'Y:J#MP)>n*R
3%V6d=]i(8]U9s'1SG"lK!p1'$5Xs/bsD)pU'2hkp.*Q[k;*C.8cE:I-9`pC)ggR193nq8mCO!#Zu!
/kRY4nHHJ7m>h=niHCmJ^"d>+]MppGE3cdds:CMh46oWEpQTACtD/!h'+q$b6c]W-SX\.8!rt&$-ed
>>d>AsMfoPleZP6L6TplgoSu_U3A4mh]T9QHrj8YX#j`[c^`O-7N$UMpb'AXLk</kP,(QmB((X&lpP
fd@q[TUm^$PuI,KKkA.+nVH0MHut./P*-n:"0\q[X9>!X0FN"ClbRk:Rk<]Zn%Yrb3GJeLeIb#cZ[t
bW1:G(,s%=-k_V2$,K^s#%6(Y%"o$I#nL[Ar2-=b4NlLQ0=1).pUjCO(]a[:$jcth`?AZ7154+)%AC
^$LQM?LJgkq,7,0_W0ar'?>H>K"K:j,.!#g4a$OcD7_p/bu!5I`"JEV!f@P8r-0d@ku,<uP=k^eFI-
DO0jSbrE%&ZEJfZp=Gj5m\,g0a#3Vn,bY1#\\=23)bTjp*9u2Uaea-8k"97@L*fPVE=^OF:UErJ&2S
D]2P$-EtlGPPeR6-JteKc+?BS>J\PYkV(,E?8l_^$'SUd_Kb,NDX%GOUL-)GQ^?d,+$l"bt/dO-C!*
BJVGQNCd"MsA6VHRSeMJ%^#/VDu4K>93.qbb)>]0d696S(#'r%nqS2$bUFL5\TRO?odJG,KY2Vj_pe
Lf+6"CkgRP"U%&tX>%R#O[T[U6nC\>,UJ`j70l9S#E"<cP)9L%M^ZH%#Cn=T=9X:Bj,I!K6mM*%Hr@
\s?UZe-`Bd_I:kblNJuNF8Kud=V>Yd8b;7Rr<`<9R<)!44Oq#H4bMSlePj<D2$[Q)b]Z!;(*N,4Q6@
u@(#/aRF<9Q<,+E\VBO'9lskTP?rAJ39?;6R6)(e8`N]\&Y047mQ9"qnTi`KeJs2a7Cb$A:R2j6cZG
t]^UM9"/j1]Do\&O8.6b7gLWp6^-VjM4nIS8UZ"B^KePTP2U#l&*0?F2M3Ekf59LP&1\=7;*D'bq8;
$>$CmYsUR1lA"2ABIgI!E?CT=`<]8c[@3.-A?NU<+C9\AYC,jJ9o`bY$*VPbaue&8d.!-V;K.a`Nih
jAJTLY"=SOQgf!HGQ<7Z!<SLo$7p?]*/qpSNlN]a8"?tV`30i)/:qPO0W6=kXKf)?S]7JE8n>[G%&]
+n#mQ3;#(dae6eY4EZcRT/b\Y<64MVUI(^,qP"Gdmc`2bnG^.@=d8jq6$'[KA[\eg0+!+7#R0I$R2>
0T1[8HdmBXOg#8hb(Q6%HPS??tof=1P>aD0Z;X:eCMb6XiLA':41[=+Pb6s8^"H7bJ_$<'\(D2^!=.
C:<;LM#S6tMoRI2J:#,6]m.X4Zkg#u2b=qHMI*`N,$Nl2s#*f+kUs$KZZcqLT7I987Z!,FmEWE]k$[
h?QN:,!Pn%,V-3rK/E,lA;M8-2%octoINbkfBI"%[LH:pF`]_&n7'+AkrBJ5@-2:`rPMq+e=8:(8+;
'cTqs&rf$ENPJ06ocMTc(s]6%dDYh.*?3Ei*7<-\dGWjcGUs)M?NFgU"goLLV%H=*!_PTndTFmpB\\
0s15CZ,".2+o70#[Y&(8C(dp4k-SM&.b"IBAt#.S](@!7:9;q"-":_]8?gs+;u]@-K0!Dl,cnn80K*
E1`hdoA?S*3umc5`<$9NOW!h^_-h/=9(T_d^*1U"VB1+/CaU);f,)74\?1AF.brscCHRc]hlAD7b)W
[(l]2tXTpnX#Z,pV4'c/Z2-Nq:A_"^B<Rk@)oPiADGLce(<O&i+oghb^BM@f)c>?ujI6Ph3;:$>#<h
X$SBr'<",$$:)<_SKS/A0R$>18ZJf"Gp!o`EZtFI*_\Pn7j;`=<5TE4PlifA+kPSG5hGGu6GAR6XLI
J/A8W:*(#,*\l_<60=bakf/7(5R\6o"cF=)&s*9J(`do:ODo`C@g@f_JGJc.3V8qHp7HX*L,&LrWVa
ZjJlNO`eHK+*I;DlBN^iDs'JO8)aFT'g#,"iu+E@`1OEdFm$R!60T[enOd.g_Z[b?SN>+**-eTE+@F
op;KTn4.*U\>"N*22(-LPd2-FfLr`ZlDeh3XrN"XfL(m-\`HDJ@KQmat9@Q08GE=UDbnCMDM&<rBK@
kf6(o_V,CBS\5ct%LO`ca#Ub7^5):+A_3fJC,"!V@Gbe:J^u^taNG2;@=]-Qb);7agTE(eY:aH`P#D
uG+6<+8J<a6%Tga0khh8@_=Lg;0Mg#55NJ2a1;!/2>!VA`p]RUmgTB-r>"h6"W6'N*]2S;79e"Ts?B
@*j-d-5?oC6Xe@:KLR7$MFD"%Gf3b)!--"gdJ3p"729Tj;9_Gd);5fu4A:F;Mf]N8G*7gq()Scfjr#
<c;7PtPiZY$nB[h>s-C%6$;eaa+XZiR[W`<b19!r9=>GtRQQ2:_KKk%DkCt<r%VUZES>4'o<KLJok#
*dl''bDWA'4\h??r3MI[/r@>JccfWr]+Jmj)NW%Sj+N\Y@R4SWfCFD<Oh45g&2,171$Edo\+X:=\![
eZW+:K'+n.-L$<,n]u<W#\_^?W45L0.-,JS<2&q'8-^Dm0Er"Mf2`=%BibnU^bcbApf'R)G*WHA"`>
%Q]r8)g%_F<;IG(#d.GJ>N\q../\J&g_Ljo'[V&)o_JZVRA"auAf?m.eC)"8rG?d!A1^64fVT#pU!d
'*H,[$l'5X&F;N[6BN6Z&tna$9ba]!67ibdOT\pg`Y"*I)9.PM<?0%Te6*g4aNSuM7d=4b+i^Z)N=e
]Z98+J0dX.#taqC-^.7k._AL5M01c6l*'%FB?9N)ki.nl-ej"hklo5u`['6KWdc&unj3mQ.U(H]r61
t7<+C38Q%bEBOAUsLq4pI*D"I/?@Q<,*@=aHM:@8k@Gos$p!eg':/IOX3,DdS9AG;:'!99VbT#SNg0
&2%<gred+uK3`";+Mb?T`>hN62dm[nVa-4\b>ZCAbN"FT<]m285<d^fQg(-WJK3:*4QPs'_NLMWUG5
WLl>Sddtl.Iu]hbqtU7,r:CeHNp9`7CprCYb5WePY2q^#a^Zf;8E,?jIe?D8k-a6[dR2%N,+OG\^*1
W-:E;%q;d"'kUnlgVo"ZN<U\\h_^WP$tD3H5Er_2p/Nm).0`4-<k0atPM;LCE;enobKl:0R2l[(5oI
*ASnQd]GGDf2oo5\S3X$+h5e:!p\7M,/bGJ>ZFtKXk3g9fLCeI7$Z,/Oo1RQi6DS9(e&$F0eW*:n8O
6]r?hYD(CI^tDT]DV2>n.Lc/$g7>N;n]l6mS1OfaI_Y:]UUH)[7u$50=G`*mj69%]VdonF<"n.`B1a
h[F/`:%p9S<I;76CnNB7Cg,bd*Vq?2l:LDrD4mru*p<G=GlM.LmIFrR(8eKa$>htt7>MbXok&]BdXF
g9"f8ed9Xm^86q`O>PnXs4F8aj@,&%Ut2^Gd2(r80trofIYGnbcadLBmX&DpbMuVAB%N9EJ^"n\@BP
ZN(pA#%\>XqS;63!ZV%EHI+CU5phKm+:K6@YYhqsAj.WZ(]su[,^>8UBESE^n/t'A'S.tG5fEF>"!V
R8]EZs<hm'\HVg9GX3'c;.',qh)6r&`7W"+SZ+q0)`,`+882ZRfC)1]e1_N50O"t1f9B;EO-LGKG`o
GNUjEZqn/MSoZPN?CR+!t$.p3Q]&u*[2R<6K(BL7u1pd`!Aa9=MRb'ZF=mOmCY`^T,LojCLc?\'o.m
45_jk%*[,ba&0\7bLPS/+,R@Ys1J&(O*/TXC7T6u\;Y=R1@ZelNFb3I))hU-Q!eZ"OL`us^J8k#_6?
n%iE*P\a:udq\<`2J%aXZ1qLj!efY0,F'10nR4"llgHL=-82#-_)>,RASo6/i?-+T`OsR"GWo!BTCJ
Jg9h#LJIsh4K"]YRS=i)YgHVV7R6JT!GI%7n[KH(YlYmf.!UDb,!^ko/!uM;EQj9pJ7l7ZU9iE<bib
T]g8+OP,<Q<iOp!<`5k,a8+En,7L-UHS-QXGd0T[G+&L8:6UGA-JdAP_T+3bd><-`qQJ5dA@/O^\5Y
a6")A5*B83%%,`T1V-kg1\/:R<7GJe#3XMVo7)+U5F+hZ(bPtfmOnfr4n[SiaGM@M5jF-S'7j+<[lj
.Ji.PC<!G<sNF;lGa/IZ18nr\;WhQ_td_j^pj'EU'H@#71X&h@H<pZB$Y0_@31Q*7K/;8h`C.?.'H0
JtA]pZ.6G1/OqVW"WTOf(*<bZb?;C0=9#E_p4%;oeWDm@CPAf$TQ5B-2";7Cn"mo&&3fF)VuX_L=D;
`EHI,C[R`r\Q9R/0tWtUDLi)#A1I'(lU,?h*SFZkD?SeMa_P`>P+pR6n6T>CZnFf^]h;Q)&50oemZm
7U\'92*=G_IXXnc@l)2[5YUO03L!Pjrri_$86Epg&P](eo&YM99eE./&.=,RUHN'iE)rY\rXDDbkN"
b,q&%(4\k$JA*H]CA:K`E4K#hV5#ZZ$%e;fZeEr<l]l)AeVcn`lhe<Mi]\(2jLodB&mb_O"oKj`YgL
Fj=.!Ago^q')#!aa4:@O^_OJ_C@jk:2V3:DX5L$^]1>bcr,;W'+c$;f)>9*6QF,J;fm8l@(I.*N1h9
"$R;a.96s$q(C/B!s/"m&rSR5@O>c>faI^jD'<Z;u4sq&`50m2&RjDI1`BlVhB^6Ci6>?-A&5<9[)k
Up9W4eS;Qof:>R9[@UIN\L1274`71jb<46-5>CL(4/"PBCtNKD@^DVd"SPU?fm2=fkUiF31qZ30E,T
LZ%C;rk*m35a6Z0aM^EWC^m+f3WGO@'/RC>j(h/c)0mu?A>\)-u<C27M9X`oeH%g9fj)h[AarggP,/
`,mkBQ4Id[Pi#piHe^0j$"OEG`Nj(HY\N*c7Y^`D5ZDK"Sd"i/]s-H/42OZ7IjYu_"^t;esmPFineU
t'0e7^4O]kc*IWsZ+%4B/o2]d3&]WW[*U14dEcN3MdQ1/OGJeY;%2&gOTk#bs0Z"\p88Shf)WoY?T+
>n$FjYN0@ctk_DM*H?etQtVMD7jU`H\[CU>0%4otEb.*n?YU+,&f?[3p.ick(k#F"\-N3lcL94Cd/p
O5n5Fp/YV[]KW:\qQ%Of5*X@tGk(=P8kMZh0d`^WSs0kDJkT=.coYl,kkuH)Bg3!h=!Xp<daD>mM0(
jkjM$u``aMW2_sKV%\C_kgcM?pQmh&WY:;/c*c+1GFa,JuIF-LppH6;MM[e\og6ZZl>TCb/Te48D!1
jJ9b5\M/A*]+pkd';UuI+7WVO4r"N!<=cfrPWmY"O?P[80CN"V(,Le.U&\6@NI"2s/IL=m:>SodeYX
)7'I.pNuTHT=s`0;-=U^:ic6DUHNL4H!q3#<YF=Vc"TsfRr24`._XK3Fpb0Mb0LH+"_\!&f=U!/YpF
i&_:Xoa?Ak2>Q:<N>SMZ+`V!f&IEhlk?5Y!!-[T)B,W#u;3+BAi$0<p@uM$Z4ti:-f8kh[AW0q2gL?
bkV-u#jlS>%5;JJE5HfQ`t'lHhiQ.K0^AD7D\!)l%oEWDNVsC6dguY'$&g_NYL_=pP7?mg#nZ&-A5a
)A*=@oB$]uqPOWtLd5nicA"0g@+nK/B@-IECb%ZYB9;+P'a9S%1\'JWS:&QoRi@hnNA5LD7+O_GMLC
tMTR'le4+&U6W^HsP,(D@To+nXM>S_\o_@qQXR_nUVO^M&,Wh(id(=dA\!<XEfqqDc*/mcclh/ZODu
3?4f*-1!"9qbXM'L$W5FbES*[!Pf^2d(su7u;-O$@!?a+<*sIEAMh)oS(EPs^&@&,SOk1_O+WjBR)\
KOuc7L7.73AdM+sZ\'CX430],4D[,]YUa/uKqhq]kI6,Vhq:Z8Es!;'bYY,r,o>nlmBf@j[@]&+VXr
12:!T`-F*NFRg1tnr,)]V&Zdl(,?B.P)+69O=P@I6h20FEg[`LKQkk;G-\%s1;$1VXWB7&.l*X&1:V
Mu^b_.m+]?uAZH4Cj[!-Q;G`pQ+P3bgsh't2=-IDuE&n*/M'ddsJ0QRCNL-%"XFY8H/02fD*na@OH%
5@@*/B^aBB9=hMgG/:G1,9k*ApZ6[PqV]>0JPXCZV<:GbqnLK1acK_kIiYsNtCf_'9cEDdB_mI<mFV
o("*6Sct*;XJN,B-qG9*to6@O(?@3Dq:_Od"1S$/)TeVUR2ba0,Ed'@HD*'HK'@UqCnd+2qWmObK0U
&sX'5o)Dbr1ct4YB5e7=R<ff/%J22RBqW&k+nPO$1rqFd(g6o;+5Vk:6(9*Ad"DmZB["76HbC4]DeQ
nm+I7r:\UTht.O^1]3$WQqR&T/9Em(Zop#4WBZ-Ul\Ja6$>g&f1C03;6?H?hZmadQ/56W>M?p#'Zkk
S6)]l?=587<g<*r)D.n"!LN_&@NB^J:\OW\au8T]GRZ8kG)Th#lg7Poj7O&-lH.Nkp**+>cG!NMk._
b=%M9U*[%eB^i'dnNfn9pFC,eDF"8j%WLr:6`Xk<:<Tso1r??::0=_FT5/P"&<t8:6buZeIPFJ#uJ#
A;3`(p2&/fM*E#lT;AC][eLsi91K.:/R/t7BYCI`eDBOecq/o>0ePB0[;cQh!<L$cgeR)>l@ocTB<g
@H$eSeM(F&u@c=-\,6eUL[9K32-/=I"eHePI0c)Z(]]Ru_$Q!Q#`5`D^oW>*R0t'Z!t\ZWgG1>4o@/
e\>#T]3H)k>a3?8<QeY_a'A;d?'Vm)Fk^4;2dQ+:>QMb]U#*Vhjrd8"*Nn3ja$iQh*FIg^4nHW^8'M
',9ViL#8sTimFpVU:eR@#216Y`^E'gNY94F)N@s0h*Fq%n=-"J@EA8R(&OE<mAe.2oi8p43GQ<Rp2a
(<3.Ap.m#,cPCa/0Ri\B3'@leph?KK4n;@BU4Qibci&&E#Z6HBoMoS%^\ia8;,&\8ms[\!+5gN3)!_
=&qm1m$.oBV`XY=C8ms.DG.VIa-LNR*8dLH6.$dJ6_?,:I*[*-<jMV]S!Gqt4#9cn`+i54P`#-9.)8
rHoG5`I)WWJ5SD'U7oQIndmg5Y#!8n"Zo6/i`3)G5Rp!oQpoA=O[5)B>Qo*WU9ljNnF1a)Rn%oX>r8
M',K#fF))u8q=P_TY#:+IMa1E"J?;3_59hU*!&>P'Z&Eq@F>5.TljlhFi9r=+V[U9L&rJM*$hBs+?C
KdE(XOo#2skH!1!oOVAu6Y"lT([!,rr(`"G>)H"8@LUn4%,N(SZZ(a+D:jIdM9:))[IHUPjl5QtYm^
_4Es)r]csTMcB?`!2o6IAA6=jF3_8qFlI=!$T-Li91OM"b3>d*'aMmjI?aRJ087"%V2LUTHenf)F<!
s7qt>1jJE[mhNL2,;oG1/5SaCY*WViGP9c_/TfO;^>Q@=Y8`;9,!X8kmge(uN$[>ZsQ]t),KW'cclb
o;=U/!![TGjN!Mh%T7G*Y_Y/-Ne&('%5?jJEmS*YG*G&KhUA"Io_(D2H1MKnOKJ$H%kaHnJmnYGA(K
A=a9=+9S:d*5ncl5]d#L7MJ7h*<6Kc=QbhK!:bV*i/h%t*YA^46K+$YF?Ui[M+$?c=L;Bh)3%,GOkB
;T5p;@]jH<Y&Sl$r%9')5hFM;0<R7ub,=g[%*3Lrq.PM,U-JO,u+k`f7.*g'$j;X'G"FZuKrWDr/J>
.%\A=fk`jQ.kn[_-sTNm$:j5T$_8[>4%X1FhZgS\QnQh>IE>XH+dPQQeV1UA0?Y8DtmQq*ta@K;B;o
&*X`dHa^jt1>dTt,Qd'.6RG@Il-oE?(Ls:^4oP>!c31rY"U(feeJ`^?56$PYtiIN6V@?[!E5Jc;tpm
bLP:]PuY'1o><RH^S<0Pa/]V.4^^^hNqum.+RFikkksfV1P7)q!pCHMrtZTQ/o[@"?],O,C"hXVNu@
]0l(DJK!GIZ93tW&K(,QYZ)DC6*;@Z*$@`'!'gNlGTI'>#>*ns&P+]k1CT'V%UP*H1'CUn0Q^A37Bp
n08cqS/ia2\=aDP[[-@pho6\M7!i",;XibJMud-gBE,^`T.ag-#\-nK7$ph0tcOhqM?VP*hpS[%g;J
XWb&W[FAap^gCAiB3MVc*MNL3%6P3Us^263,Aa&V;kc%^TTY0(P1SPFEipucos<]PDpAJ;7(@M8dEj
o-V@:DZAD-#o[Plq;mc3^:fK:e7oE<o2,@1O2-!^Y<OHsV=B7;EB3J?D[;T;O2:ZnW=1.^N?s#<%LL
OAo2329N2H?)U=giIFBNd<ZVeTDD[BFCN2V#9S>H>=:~>
%%EndData
end restore showpage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 9253 10862 a Fd(F)n(igure)g(2:)10258
10862 y
SDict begin H.S end
 10258 10862 a 10258 10862 a
SDict begin H.R end
 10258 10862 a 10258
10862 a
SDict begin [/View [/XYZ H.V]/Dest (figure.2) cvn /DEST pdfmark end
 10258 10862 a Fd(the)g(part)g(description)f(of)h(the)g(data)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-600 11693 a([,bm=,toc=]Conc)n(lusion)-600 11975 y(conc)n(lusion)g
(Conc)n(lusion)-185 12357 y(=)p 0 TeXcolorgray -50 12357
a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 -50 12357 a Fd(It)g(is)g(possible)f(to)h(bulid)f(a)h(c)n
(lass\002cation)f(model)h(to)g(predict)g(houses)f(for)h(different)g
(demands)f(of)h(people)l(.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 600 368 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 600 368
a 0 TeXcolorgray 0 TeXcolorgray -600 6872 a Fd([toc=,bm=])7491
8995 y(=)p 0 TeXcolorgray 7626 8995 a
tx@Dict begin tx@ovlDict begin (0) BOL end end
 7626 8995 a 1783
w Fa(Thank)154 b(you)g(&)f(Question)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
